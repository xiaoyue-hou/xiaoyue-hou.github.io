<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2025/05/30/zotero/"/>
      <url>2025/05/30/zotero/</url>
      
        <content type="html"><![CDATA[<h1 id="Zotero"><a href="#Zotero" class="headerlink" title="Zotero"></a>Zotero</h1><h2 id="一、常规设置"><a href="#一、常规设置" class="headerlink" title="一、常规设置"></a>一、常规设置</h2><h3 id="1、Zotero与Onedrive联动"><a href="#1、Zotero与Onedrive联动" class="headerlink" title="1、Zotero与Onedrive联动"></a>1、Zotero与Onedrive联动</h3><p>mklink /j “C:\Users\Lenovo\Zotero\storage” “F:\OneDrive\Zotero\storage”</p><h3 id="2、常规中自定义文件名格式："><a href="#2、常规中自定义文件名格式：" class="headerlink" title="2、常规中自定义文件名格式："></a>2、常规中自定义文件名格式：</h3><p>zotero 命名格式 </p><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token punctuation">{</span> year suffix<span class="token operator">=</span><span class="token string">"_"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> title truncate<span class="token operator">=</span><span class="token string">"100"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">{</span>journalAbbreviation <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> language <span class="token operator">==</span> <span class="token string">"zh"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>_<span class="token punctuation">{</span><span class="token punctuation">{</span>firstCreator<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>elseif language <span class="token operator">==</span><span class="token string">"zh-CN"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>_<span class="token punctuation">{</span><span class="token punctuation">{</span>firstCreator<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">}</span>_<span class="token punctuation">{</span><span class="token punctuation">{</span>creators  max<span class="token operator">=</span><span class="token string">"1"</span> suffix<span class="token operator">=</span><span class="token string">" et al"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> endif <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2025/05/30/zotero/image.png" alt="image.png"></p><p>![image.png](Zotero.assets/image 1.png)</p><p>![image.png](Zotero.assets/image 2.png)</p><p>![image.png](Zotero.assets/image 3.png)</p><p>![image.png](Zotero.assets/image 4.png)</p><h2 id="二、Zotero插件"><a href="#二、Zotero插件" class="headerlink" title="二、Zotero插件"></a>二、Zotero插件</h2><p>![image.png](Zotero.assets/image 5.png)</p><p>![image.png](Zotero.assets/image 6.png)</p><h3 id="1、easyscholar网址：https-www-easyscholar-cc"><a href="#1、easyscholar网址：https-www-easyscholar-cc" class="headerlink" title="1、easyscholar网址：https://www.easyscholar.cc/"></a>1、easyscholar网址：<a href="https://www.easyscholar.cc/">https://www.easyscholar.cc/</a></h3><p>![image.png](Zotero.assets/image 7.png)</p><p><img src="/2025/05/30/zotero/QQ_1743403794985.png" alt="QQ_1743403794985.png"></p><p><img src="/2025/05/30/zotero/QQ_1743403806644.png" alt="QQ_1743403806644.png"></p><p><img src="/2025/05/30/zotero/QQ_1743403831452.png" alt="QQ_1743403831452.png"></p><h3 id="2、笔记模板——进去新建条目"><a href="#2、笔记模板——进去新建条目" class="headerlink" title="2、笔记模板——进去新建条目"></a>2、笔记模板——进去新建条目</h3><p>![image.png](Zotero.assets/image 8.png)</p><h4 id="（1）PaperNote"><a href="#（1）PaperNote" class="headerlink" title="（1）PaperNote"></a>（1）PaperNote</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Title <span class="token operator">--</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#eef9fd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'T'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> titleTranslation <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"titleTranslation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&amp;&amp;</span> titleTranslation<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>titleTranslation<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Meta Data <span class="token operator">--</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Author <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#dbeedd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Author<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> $<span class="token punctuation">{</span>topItem<span class="token punctuation">.</span><span class="token function">getCreators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> v<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>topItem<span class="token punctuation">.</span><span class="token function">getCreators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"; et al."</span> <span class="token punctuation">:</span> <span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Journal <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Journal<span class="token punctuation">:</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#FF0000</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        $<span class="token punctuation">{</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'publicationTitle'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>      $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">const</span> volume <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'volume'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> issue <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'issue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> pages <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'pages'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> year <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">)</span> <span class="token punctuation">{</span>          line <span class="token operator">+</span><span class="token operator">=</span> volume<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>issue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            line <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> issue <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>            line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> <span class="token string">": "</span> <span class="token operator">+</span> pages <span class="token operator">+</span> <span class="token string">","</span> <span class="token punctuation">:</span> <span class="token string">","</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> <span class="token string">": "</span> <span class="token operator">+</span> pages <span class="token operator">+</span> <span class="token string">","</span> <span class="token punctuation">:</span> <span class="token string">","</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>issue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          line <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> issue <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>          line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> <span class="token string">": "</span> <span class="token operator">+</span> pages <span class="token punctuation">:</span> <span class="token string">","</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> pages <span class="token operator">+</span> <span class="token string">","</span> <span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        line <span class="token operator">+</span><span class="token operator">=</span> year <span class="token operator">?</span> <span class="token string">" "</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">"."</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> line<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Journal Tags <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#dbeedd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Journal Tags<span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> In Zotero7<span class="token punctuation">,</span> the tags <span class="token keyword">of</span> Ethereal Style plugin are referenced<span class="token punctuation">.</span> Please install Ethereal Style <span class="token keyword">in</span> advance<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>      $<span class="token punctuation">{</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> space <span class="token operator">=</span> <span class="token string">" ㅤㅤ ㅤㅤ"</span>      <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>        Zotero<span class="token punctuation">.</span>ZoteroStyle<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">renderCell</span><span class="token punctuation">(</span>topItem<span class="token punctuation">,</span> <span class="token string">"publicationTags"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">,</span>        e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span>innerText <span class="token operator">=</span>  space <span class="token operator">+</span> e<span class="token punctuation">.</span>innerText <span class="token operator">+</span> space<span class="token punctuation">;</span>          <span class="token keyword">return</span> e<span class="token punctuation">.</span>outerHTML        <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>$    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Local Link <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> attachments <span class="token operator">=</span> Zotero<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>topItem<span class="token punctuation">.</span><span class="token function">getAttachments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> pdf <span class="token operator">=</span> attachments<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">.</span><span class="token function">isPDFAttachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pdf <span class="token operator">&amp;&amp;</span> pdf<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>Local Link: &lt;/b>&lt;a href="zotero://open-pdf/0_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pdf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pdf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>attachments <span class="token operator">&amp;&amp;</span> attachments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>Local Link: &lt;/b>&lt;a href="zotero://open-pdf/0_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attachments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attachments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>Local Link: &lt;/b>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> DOI or URL <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#dbeedd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> doi <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"DOI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doi<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>DOI: &lt;/b>&lt;a href="https://doi.org/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'DOI'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'DOI'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>URL: &lt;/b>&lt;a href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Abstract <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> abstractTranslation <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'abstractTranslation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>abstractTranslation<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>Abstract Translation: &lt;/b>&lt;i></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>abstractTranslation<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/i>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>Abstract: &lt;/b>&lt;i></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'abstractNote'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/i>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Tags <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#dbeedd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Filter and display tags starting <span class="token keyword">with</span> # <span class="token operator">--</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Tags<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> $<span class="token punctuation">{</span>topItem<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>tagObj <span class="token operator">=</span><span class="token operator">></span> tagObj<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token operator">?</span> tagObj<span class="token punctuation">.</span>tag <span class="token operator">+</span> <span class="token string">' ,'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Note Date <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Note Date<span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>$<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Main Content <span class="token operator">--</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#e0ffff</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#66cdaa</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>📜 Research Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>💧 Data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>👩🏻‍💻 Method<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>⚙️ Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>📜 Conclusion<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#20b2aa</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#afeeee</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>🔁 Research Core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>💡 Innovations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>🧩 Shortcomings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>📌 To be resolved<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#004d99</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#87cefa</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>🤔 Personal Summary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>🙋‍♀️ Key Records<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>💭 Thought Inspiration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h4 id="（2）PaperItem"><a href="#（2）PaperItem" class="headerlink" title="（2）PaperItem"></a>（2）PaperItem</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Meta Data <span class="token operator">--</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Title <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#BAD8B6</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Title：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'T'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Author <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Author：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> $<span class="token punctuation">{</span>topItem<span class="token punctuation">.</span><span class="token function">getCreators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> v<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>topItem<span class="token punctuation">.</span><span class="token function">getCreators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"; et al."</span> <span class="token punctuation">:</span> <span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Journal <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#dbeedd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Journal：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        $<span class="token punctuation">{</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'publicationTitle'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>，            $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">const</span> volume <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'volume'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> issue <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'issue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> pages <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'pages'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> year <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>volume<span class="token punctuation">)</span> <span class="token punctuation">{</span>          line <span class="token operator">+</span><span class="token operator">=</span> volume<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>issue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            line <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> issue <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>            line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> <span class="token string">": "</span> <span class="token operator">+</span> pages <span class="token operator">+</span> <span class="token string">","</span> <span class="token punctuation">:</span> <span class="token string">","</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> <span class="token string">": "</span> <span class="token operator">+</span> pages <span class="token operator">+</span> <span class="token string">","</span> <span class="token punctuation">:</span> <span class="token string">","</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>issue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          line <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> issue <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>          line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> <span class="token string">": "</span> <span class="token operator">+</span> pages <span class="token punctuation">:</span> <span class="token string">","</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          line <span class="token operator">+</span><span class="token operator">=</span> pages <span class="token operator">?</span> pages <span class="token operator">+</span> <span class="token string">","</span> <span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        line <span class="token operator">+</span><span class="token operator">=</span> year <span class="token operator">?</span> <span class="token string">" "</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">"."</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> line<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Journal Tags <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Journal Tags：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> In Zotero7<span class="token punctuation">,</span> the tags <span class="token keyword">of</span> Ethereal Style plugin are referenced<span class="token punctuation">.</span> Please install Ethereal Style <span class="token keyword">in</span> advance<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>      $<span class="token punctuation">{</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> space <span class="token operator">=</span> <span class="token string">" ㅤㅤ ㅤㅤ"</span>      <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>        Zotero<span class="token punctuation">.</span>ZoteroStyle<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">renderCell</span><span class="token punctuation">(</span>topItem<span class="token punctuation">,</span> <span class="token string">"publicationTags"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">,</span>        e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span>innerText <span class="token operator">=</span>  space <span class="token operator">+</span> e<span class="token punctuation">.</span>innerText <span class="token operator">+</span> space<span class="token punctuation">;</span>          <span class="token keyword">return</span> e<span class="token punctuation">.</span>outerHTML        <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>$    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> DOI or URL <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#dbeedd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> doi <span class="token operator">=</span> topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"DOI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doi<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>DOI：&lt;/b>&lt;a href="https://doi.org/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'DOI'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'DOI'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;b>URL：&lt;/b>&lt;a href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>topItem<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Key Records <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Key Records：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Tags <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#dbeedd</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Filter and display tags starting <span class="token keyword">with</span> # <span class="token operator">--</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Tags：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> $<span class="token punctuation">{</span>topItem<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>tagObj <span class="token operator">=</span><span class="token operator">></span> tagObj<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token operator">?</span> tagObj<span class="token punctuation">.</span>tag <span class="token operator">+</span> <span class="token string">' ,'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Note Date <span class="token operator">--</span><span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#193c47</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#f3faf4</span><span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">8</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Note Date：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>$<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p><img src="/2025/05/30/zotero/QQ_1743403929642.png" alt="QQ_1743403929642.png"></p><p><img src="/2025/05/30/zotero/QQ_1743403957307.png" alt="QQ_1743403957307.png"></p><p><img src="/2025/05/30/zotero/QQ_1743403987407.png" alt="QQ_1743403987407.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-osrm</title>
      <link href="2024/12/28/docker-osrm/"/>
      <url>2024/12/28/docker-osrm/</url>
      
        <content type="html"><![CDATA[<p>1、安装docker并升级到最新版本，安装时加入到环境变量</p><p>2、在docker中拉取osrm镜像，cmd中执行</p><pre class=" language-python"><code class="language-python">docker pull osrm<span class="token operator">/</span>osrm<span class="token operator">-</span>backend  <span class="token comment" spellcheck="true"># 在docker hub上下载旧版（https://hub.docker.com/r/osrm/osrm-backend/tags）  </span>docker pull ghcr<span class="token punctuation">.</span>io<span class="token operator">/</span>project<span class="token operator">-</span>osrm<span class="token operator">/</span>osrm<span class="token operator">-</span>backend<span class="token punctuation">:</span>v5<span class="token number">.27</span><span class="token punctuation">.</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 在github上下载新版（https://github.com/Project-OSRM/osrm-backend/releases）</span><span class="token comment" spellcheck="true"># 非必要命令</span>docker run <span class="token operator">-</span>it <span class="token operator">-</span><span class="token operator">-</span>rm ghcr<span class="token punctuation">.</span>io<span class="token operator">/</span>project<span class="token operator">-</span>osrm<span class="token operator">/</span>osrm<span class="token operator">-</span>backend<span class="token punctuation">:</span>v5<span class="token number">.27</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">/</span>bin<span class="token operator">/</span>bash  <span class="token comment" spellcheck="true"># 进入</span>ls <span class="token comment" spellcheck="true"># 进入查看配置文件</span></code></pre><p>3、下载OSM的地区文件，.osm.pbf格式的，数据放在D:\APP\OSRM\osrm文件夹下，数据名称叫做sjz_car.osm.pbf</p><p>4、用osrm配置文件处理数据（共4步）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用不同交通方式提取数据，这里的car可以改成bicycle和foot，最后采用不同端口部署（本科5001:foot，5002:bicycle, 5003:car)</span>docker run <span class="token operator">-</span>t <span class="token operator">-</span>v D<span class="token punctuation">:</span>\APP\OSRM\osrm<span class="token punctuation">:</span><span class="token operator">/</span>data ghcr<span class="token punctuation">.</span>io<span class="token operator">/</span>project<span class="token operator">-</span>osrm<span class="token operator">/</span>osrm<span class="token operator">-</span>backend<span class="token punctuation">:</span>v5<span class="token number">.27</span><span class="token punctuation">.</span><span class="token number">1</span> osrm<span class="token operator">-</span>extract <span class="token operator">-</span>p car<span class="token punctuation">.</span>lua <span class="token operator">/</span>data<span class="token operator">/</span>sjz_car<span class="token punctuation">.</span>osm<span class="token punctuation">.</span>pbf  <span class="token comment" spellcheck="true"># 进行数据分区：OSRM使用多级分区技术（MLD）将路网划分为多个层级的区域，以加速路径查询。这种分区结构使得在大型路网中进行路径计算时，可以快速缩小搜索范围，提高查询效率。</span>docker run <span class="token operator">-</span>t <span class="token operator">-</span>v D<span class="token punctuation">:</span>\APP\OSRM\osrm<span class="token punctuation">:</span><span class="token operator">/</span>data ghcr<span class="token punctuation">.</span>io<span class="token operator">/</span>project<span class="token operator">-</span>osrm<span class="token operator">/</span>osrm<span class="token operator">-</span>backend<span class="token punctuation">:</span>v5<span class="token number">.27</span><span class="token punctuation">.</span><span class="token number">1</span> osrm<span class="token operator">-</span>partition <span class="token operator">/</span>data<span class="token operator">/</span>sjz_car<span class="token punctuation">.</span>osrm  <span class="token comment" spellcheck="true"># 数据订制化，定制化过程根据特定的交通方式和用户需求，对预处理的数据进行调整。例如，针对不同的交通方式，可能需要应用不同的速度限制、道路优先级或其他约束条件。定制化确保了路由引擎能够根据实际需求提供最优的路线规划</span>docker run <span class="token operator">-</span>t <span class="token operator">-</span>v D<span class="token punctuation">:</span>\APP\OSRM\osrm<span class="token punctuation">:</span><span class="token operator">/</span>data ghcr<span class="token punctuation">.</span>io<span class="token operator">/</span>project<span class="token operator">-</span>osrm<span class="token operator">/</span>osrm<span class="token operator">-</span>backend<span class="token punctuation">:</span>v5<span class="token number">.27</span><span class="token punctuation">.</span><span class="token number">1</span> osrm<span class="token operator">-</span>customize <span class="token operator">/</span>data<span class="token operator">/</span>sjz_car<span class="token punctuation">.</span>osrm  <span class="token comment" spellcheck="true"># 以不同的端口运行</span>docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">5003</span><span class="token punctuation">:</span><span class="token number">5000</span> <span class="token operator">-</span><span class="token operator">-</span>name osrm_backend_car <span class="token operator">-</span>v D<span class="token punctuation">:</span>\APP\OSRM\osrm<span class="token punctuation">:</span><span class="token operator">/</span>data ghcr<span class="token punctuation">.</span>io<span class="token operator">/</span>project<span class="token operator">-</span>osrm<span class="token operator">/</span>osrm<span class="token operator">-</span>backend<span class="token punctuation">:</span>v5<span class="token number">.27</span><span class="token punctuation">.</span><span class="token number">1</span> osrm<span class="token operator">-</span>routed <span class="token operator">-</span><span class="token operator">-</span>algorithm mld <span class="token operator">/</span>data<span class="token operator">/</span>sjz_car<span class="token punctuation">.</span>osrm  <span class="token comment" spellcheck="true"># 检验, 端口决定交通方式，car位置可填任何字符串，都默认为该端口配置的</span>http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">5003</span><span class="token operator">/</span>route<span class="token operator">/</span>v1<span class="token operator">/</span>car<span class="token operator">/</span><span class="token number">114.557077</span><span class="token punctuation">,</span><span class="token number">38.0156195</span><span class="token punctuation">;</span><span class="token number">114.169827</span><span class="token punctuation">,</span><span class="token number">37.618745</span>  <span class="token comment" spellcheck="true"># 其他命令</span>docker ps <span class="token operator">-</span>a 查看所有容器； docker stop 容器id 中断对应容器； docker rm 容器id 删除对应容器</code></pre><p>5、爬虫</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> polyline<span class="token keyword">def</span> <span class="token function">get_walking_route</span><span class="token punctuation">(</span>start_coords<span class="token punctuation">,</span> end_coords<span class="token punctuation">,</span> osrm_url<span class="token operator">=</span><span class="token string">'http://localhost:5001'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    从 OSRM 获取步行路线的时间、距离和路径坐标    :param start_coords: 起点的经纬度元组 (纬度, 经度)    :param end_coords: 终点的经纬度元组 (纬度, 经度)    :param osrm_url: OSRM 服务的 URL 地址，默认本地服务    :return: None，直接打印结果    """</span>    <span class="token comment" spellcheck="true"># 构建请求 URL</span>    url <span class="token operator">=</span> f<span class="token string">"{osrm_url}/route/v1/walking/{start_coords[1]},{start_coords[0]};{end_coords[1]},{end_coords[0]}"</span>        <span class="token comment" spellcheck="true"># 请求参数：overview=full 表示返回完整路线，steps=true 返回每个步骤的详细信息，geometries=polyline 返回 polyline 格式的路径</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'overview'</span><span class="token punctuation">:</span> <span class="token string">'full'</span><span class="token punctuation">,</span>        <span class="token string">'steps'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token string">'geometries'</span><span class="token punctuation">:</span> <span class="token string">'polyline'</span>  <span class="token comment" spellcheck="true"># 返回路径的 polyline 编码</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 发起 GET 请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 获取第一个路径</span>        route <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'routes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 路程和时间</span>        duration <span class="token operator">=</span> route<span class="token punctuation">[</span><span class="token string">'duration'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">60</span>  <span class="token comment" spellcheck="true"># 转换为分钟</span>        distance <span class="token operator">=</span> route<span class="token punctuation">[</span><span class="token string">'distance'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000</span>  <span class="token comment" spellcheck="true"># 转换为公里</span>                <span class="token comment" spellcheck="true"># 获取路径的 polyline 编码，并解码为坐标</span>        encoded_polyline <span class="token operator">=</span> route<span class="token punctuation">[</span><span class="token string">'geometry'</span><span class="token punctuation">]</span>        decoded_polyline <span class="token operator">=</span> polyline<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoded_polyline<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 输出路线信息</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"步行路线信息:"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"总路程: {distance:.2f} 公里"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"预计时间: {duration:.2f} 分钟"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"路径坐标 (Polyline 解码):"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> point <span class="token keyword">in</span> decoded_polyline<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"({point[0]}, {point[1]})"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 输出详细的路线步骤</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n路线步骤:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> step <span class="token keyword">in</span> route<span class="token punctuation">[</span><span class="token string">'legs'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'steps'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"- {step['instruction']} (距离: {step['distance']} 米, 时间: {step['duration'] / 60:.2f} 分钟)"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"请求失败: {response.status_code}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 示例：起点和终点的经纬度（例如，柏林的两个位置）</span>    start_coordinates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">52.517037</span><span class="token punctuation">,</span> <span class="token number">13.388860</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 起点：柏林</span>    end_coordinates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">52.529407</span><span class="token punctuation">,</span> <span class="token number">13.397634</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 终点：柏林</span>    <span class="token comment" spellcheck="true"># 调用函数获取步行路线信息</span>    get_walking_route<span class="token punctuation">(</span>start_coordinates<span class="token punctuation">,</span> end_coordinates<span class="token punctuation">)</span></code></pre><p>6、服务的关闭与开启</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 启动：docker start &lt;container_name></span><span class="token comment" spellcheck="true"># 停止：docker stop &lt;container_name></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建博客</title>
      <link href="2021/05/09/hexo-github-da-jian-bo-ke/"/>
      <url>2021/05/09/hexo-github-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>This article is mainly about some steps to build a blog.           If you get any problems，you can ask me on the <a href="https://github.com/xiaoyue-hou/xiaoyue-hou.github.io">GitHub</a>.    </p><h2 id="一-下载安装-Node-js和Git"><a href="#一-下载安装-Node-js和Git" class="headerlink" title="一.下载安装 Node.js和Git"></a>一.下载安装 Node.js和Git</h2><p>1.Node.js下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>选大多数人用的版本就可，下载后安装到固定文件夹下，在这里我们安装到D:\博客\node</p><p>2.Git下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>根据自己电脑选择合适版本，下载安装到固定文件夹下，在这里我们安装到D:\博客\git</p><pre class=" language-c"><code class="language-c">在终端输入以下命令，检查node<span class="token punctuation">.</span>js和git是否安装成功node <span class="token operator">-</span>vnpm <span class="token operator">-</span>vgit <span class="token operator">--</span>version</code></pre><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/1.png"></p><h2 id="二-搭建github博客"><a href="#二-搭建github博客" class="headerlink" title="二.搭建github博客"></a>二.搭建github博客</h2><p>1.首先在GitHub上创建一个账号，注册的邮箱一定要验证，否则不会成功；</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/2.png"></p><p>2.创建仓库</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/3.png"></p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/4.png"></p><p>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名；仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/5.png"></p><p>显示创建成功，可以登录那个网址，就是下图这样的界面，也可在上图中修改主题</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/6.png"></p><h2 id="三-配置SSH-key"><a href="#三-配置SSH-key" class="headerlink" title="三.配置SSH key"></a>三.配置SSH key</h2><p>1.随便找个位置右击出现git bash here，然后在里面输入口令</p><pre class=" language-c"><code class="language-c">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"邮件地址"</span></code></pre><p>2.然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/7.png"></p><p>3.打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key将刚复制的内容粘贴到key那里，title随便填，保存。</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/8.png"></p><p>4.测试是否成功</p><p>随便找个位置右击出现git bash here，然后在里面输入口令</p><pre class=" language-c"><code class="language-c">ssh <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>com # 注意邮箱地址不用改</code></pre><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi t1anyu! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><p>此时你还需要配置：</p><pre class=" language-c"><code class="language-c">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"t1anyu"</span><span class="token comment" spellcheck="true">// 你的github用户名，非昵称</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email  <span class="token string">"xxx@qq.com"</span><span class="token comment" spellcheck="true">// 填写你的github注册邮箱</span></code></pre><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/9.png"></p><h2 id="四-安装配置-Hexo"><a href="#四-安装配置-Hexo" class="headerlink" title="四.安装配置 Hexo"></a>四.安装配置 Hexo</h2><p>前面已经安装了Git和Node.js，然后用npm，安装Hexo  找个D:\博客\hexo文件夹，在这个文件夹里面右键“git bash here”,打开git控制台</p><p>1.安装 npm install hexo-cli -g</p><p>2.初始化 hexo init</p><p>hexo会自动下载一些文件到这个目录，包括node_modules</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/10.png"></p><p>4.启动服务 hexo s </p><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p><p><a href="http://blog.liuxianan.com/windows-port-bind.html">http://blog.liuxianan.com/windows-port-bind.html</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/11.png"></p><p>5.上传到GitHub</p><p>配置hexo初始化目录（D:\博客\hexo）下的<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><pre class=" language-c"><code class="language-c">deploy<span class="token punctuation">:</span>  type<span class="token punctuation">:</span> git  repo<span class="token punctuation">:</span> git@github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>t1anyu<span class="token operator">/</span>t1anyu<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git  branch<span class="token punctuation">:</span> master</code></pre><p>然后在D:\博客\hexo下git bash here执行</p><pre class=" language-c"><code class="language-c">安装插件<span class="token punctuation">:</span>npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save清除缓存文件：hexo clean生成：hexo g部署：hexo d</code></pre><p><img src="/2021/05/09/hexo-github-da-jian-bo-ke/12.png"></p><p><strong>成功后登录上面那个网址(<a href="https://t1anyu.github.io/)%E5%8D%B3%E5%8F%AF%EF%BC%8C%E5%8D%9A%E5%AE%A2%E5%B0%B1%E7%AE%97%E6%98%AF%E6%90%AD%E5%A5%BD%E4%BA%86%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E6%98%AF%E4%B8%80%E4%BA%9B%E7%BE%8E%E5%8C%96%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8A%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%A6%81%E6%B1%82">https://t1anyu.github.io/)即可，博客就算是搭好了，下面的内容是一些美化功能以及写博客的要求</a></strong></p><h2 id="五-更换主题"><a href="#五-更换主题" class="headerlink" title="五.更换主题"></a>五.更换主题</h2><p>参考链接中的修改主题部分，或者随便搜一下hexo更换主题</p><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98</a></p><h2 id="六-如何写文章"><a href="#六-如何写文章" class="headerlink" title="六.如何写文章"></a>六.如何写文章</h2><p>参考五中的写博客部分以及下面两个链接</p><p>1、<a href="https://blog.csdn.net/wsmrzx/article/details/81478945?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&amp;dist_request_id=1332049.8468.16193996158144771&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">https://blog.csdn.net/wsmrzx/article/details/81478945?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1332049.8468.16193996158144771&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p><p>这里面说的站点文件夹是D:\APP\blog\hexo，在这个文件夹下 git bash，输入以下代码，就会在 <code>source/_post</code> 文件夹下创建一个文件，命名为：<code>title.md</code>，便可以写文字了</p><pre><code>$ hexo new &quot;title&quot;</code></pre><p>写完之后还在站点文件夹下，输入如下命令部署</p><pre><code>$ hexo g</code></pre><p>先试用以下命令运行本地站点，在浏览器输入地址 <a href="http://localhost:4000/">http://localhost:4000/</a> 检查是否有问题</p><pre><code>$ hexo s</code></pre><p>检查无误后，再用一下命令发布</p><pre><code>$ hexo d</code></pre><p>2、<a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列（持续更新中）</title>
      <link href="2021/05/02/zhan-he-dui-lie/"/>
      <url>2021/05/02/zhan-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>This article is mainly about my organization of the data structure.   If you get any problems，you can ask me on <a href="https://github.com/xiaoyue-hou/xiaoyue-hou.github.io">GitHub</a>.</p><h2 id="1-栈"><a href="#1-栈" class="headerlink" title="1 栈"></a>1 栈</h2><h3 id="1-1-基本概念："><a href="#1-1-基本概念：" class="headerlink" title="1.1 基本概念："></a>1.1 基本概念：</h3><p>栈是运算受限的线性表</p><p>限制：插入和删除操作只能在同一端进行</p><p>特点：后进先出(LIFO)或先进后出(FILO)</p><p>栈是仅在表尾进行插入、删除操作的线性表。表尾称为栈顶(Top)，表头称为栈底(Base)。</p><h3 id="1-2-数学内容"><a href="#1-2-数学内容" class="headerlink" title="1.2 数学内容"></a>1.2 数学内容</h3><p>若n个元素顺序入栈，则可能的出栈顺序为C(2n,n)/(n+1)=(2n)!/((n+1)!n!)</p><h3 id="1-3-顺序表示"><a href="#1-3-顺序表示" class="headerlink" title="1.3 顺序表示"></a>1.3 顺序表示</h3><p>==*加代码==</p><h3 id="1-4-链式表示"><a href="#1-4-链式表示" class="headerlink" title="1.4 链式表示"></a>1.4 链式表示</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//测试样例是PPT中十进制转八进制  1348</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ok 1</span><span class="token macro property">#<span class="token directive keyword">define</span> overflow 0</span><span class="token macro property">#<span class="token directive keyword">define</span> error 0</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> selemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> snode<span class="token punctuation">{</span>    selemtype date<span class="token punctuation">;</span>    <span class="token keyword">struct</span> snode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>lsnode<span class="token punctuation">,</span><span class="token operator">*</span>slnode<span class="token punctuation">;</span>status <span class="token function">InitStack</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化 </span><span class="token punctuation">{</span>    <span class="token operator">*</span>h<span class="token operator">=</span><span class="token punctuation">(</span>slnode<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lsnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>h<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span>status <span class="token function">Push</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">,</span>selemtype e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//入栈 </span><span class="token punctuation">{</span>    slnode r<span class="token punctuation">;</span>    r<span class="token operator">=</span><span class="token punctuation">(</span>slnode<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lsnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token operator">-></span>date<span class="token operator">=</span>e<span class="token punctuation">;</span>    r<span class="token operator">-></span>next<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token operator">=</span>r<span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>    <span class="token punctuation">}</span>status <span class="token function">Pop</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">,</span>selemtype <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//出栈 </span><span class="token punctuation">{</span>    <span class="token operator">*</span>h<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>date<span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">GetTop</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">,</span> selemtype <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读栈顶 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">-></span>next<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> error<span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>h<span class="token operator">-></span>next<span class="token operator">-></span>date<span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span>status <span class="token function">StackEmpty</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断栈空 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">-></span>next<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span>selemtype n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">StackTravers</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun1<span class="token punctuation">)</span><span class="token punctuation">(</span>selemtype n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历栈 </span><span class="token punctuation">{</span>    slnode r<span class="token operator">=</span>h<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>fun1<span class="token punctuation">)</span><span class="token punctuation">(</span>r<span class="token operator">-></span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">DestroyStack</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//销毁栈 </span><span class="token punctuation">{</span>    slnode r<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        r<span class="token operator">=</span><span class="token operator">*</span>h<span class="token punctuation">;</span>        <span class="token operator">*</span>h<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">StackLength</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求栈长度 </span><span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    slnode r<span class="token operator">=</span>h<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    slnode h<span class="token punctuation">;</span>    selemtype e<span class="token punctuation">;</span>        <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化栈 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"验证初始化栈：%d\n"</span><span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//销毁栈  </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"验证毁灭栈：%d\n"</span><span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化栈 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//入栈 </span>    <span class="token punctuation">{</span>        <span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">,</span>m<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token operator">=</span>m<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断栈空 </span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"遍历栈："</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token function">StackTravers</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>fun1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历栈</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">GetTop</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读栈顶</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读栈顶：%d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">StackLength</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求栈长度 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"求栈长：%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//出栈 </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出栈：%d "</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">StackLength</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求栈长度 </span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"目前栈长：%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>         <span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//销毁栈</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-应用"><a href="#1-5-应用" class="headerlink" title="1.5 应用"></a>1.5 应用</h3><h4 id="1-5-1-数制转换"><a href="#1-5-1-数制转换" class="headerlink" title="1.5.1 数制转换"></a>1.5.1 数制转换</h4><p>例题：设计算法，将十进制整数转换为八进制，在函数中输入数据并输出结果。</p><p>见链表表示</p><h4 id="1-5-2-括号匹配"><a href="#1-5-2-括号匹配" class="headerlink" title="1.5.2 括号匹配"></a>1.5.2 括号匹配</h4><p>例题：假设通过键盘输入的一个表达式中只出现()和[]并允许任意顺序的嵌套，设计算法，检测括号是否匹配。</p><p>==*加代码==</p><h4 id="1-5-3-迷宫求解"><a href="#1-5-3-迷宫求解" class="headerlink" title="1.5.3 迷宫求解"></a>1.5.3 迷宫求解</h4><p><img src="/2021/05/02/zhan-he-dui-lie/%E8%BF%B7%E5%AE%AB.png" alt="迷宫"></p><p><img src="/2021/05/02/zhan-he-dui-lie/%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A31.png" alt="迷宫求解1"></p><p><img src="/2021/05/02/zhan-he-dui-lie/%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A32.png" alt="迷宫求解2"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ok 1</span><span class="token macro property">#<span class="token directive keyword">define</span> overflow 0</span><span class="token macro property">#<span class="token directive keyword">define</span> error 0</span><span class="token keyword">int</span> maze<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>postype<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> di<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span>    postype    seat<span class="token punctuation">;</span> <span class="token punctuation">}</span>selemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> snode<span class="token punctuation">{</span>    selemtype date<span class="token punctuation">;</span>    <span class="token keyword">struct</span> snode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>lsnode<span class="token punctuation">,</span><span class="token operator">*</span>slnode<span class="token punctuation">;</span>status <span class="token function">InitStack</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化 </span><span class="token punctuation">{</span>    <span class="token operator">*</span>h<span class="token operator">=</span><span class="token punctuation">(</span>slnode<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lsnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>h<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span>status <span class="token function">Push</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">,</span>selemtype e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//入栈 </span><span class="token punctuation">{</span>    slnode r<span class="token punctuation">;</span>    r<span class="token operator">=</span><span class="token punctuation">(</span>slnode<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lsnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token operator">-></span>date<span class="token operator">=</span>e<span class="token punctuation">;</span>    r<span class="token operator">-></span>next<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token operator">=</span>r<span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>    <span class="token punctuation">}</span>status <span class="token function">Pop</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">,</span>selemtype <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//出栈 </span><span class="token punctuation">{</span>    <span class="token operator">*</span>h<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>date<span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">GetTop</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">,</span> selemtype <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读栈顶 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">-></span>next<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> error<span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>h<span class="token operator">-></span>next<span class="token operator">-></span>date<span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span>status <span class="token function">StackEmpty</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断栈空 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">-></span>next<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span>selemtype n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">StackTravers</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun1<span class="token punctuation">)</span><span class="token punctuation">(</span>selemtype n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历栈 </span><span class="token punctuation">{</span>    slnode r<span class="token operator">=</span>h<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>fun1<span class="token punctuation">)</span><span class="token punctuation">(</span>r<span class="token operator">-></span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">DestroyStack</span><span class="token punctuation">(</span>slnode <span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//销毁栈 </span><span class="token punctuation">{</span>    slnode r<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        r<span class="token operator">=</span><span class="token operator">*</span>h<span class="token punctuation">;</span>        <span class="token operator">*</span>h<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">StackLength</span><span class="token punctuation">(</span>slnode h<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求栈长度 </span><span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    slnode r<span class="token operator">=</span>h<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        r<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span> status <span class="token function">pass</span><span class="token punctuation">(</span>postype pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>pos<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  postype <span class="token function">nextpos</span><span class="token punctuation">(</span>postype pos<span class="token punctuation">,</span><span class="token keyword">int</span> di<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>di<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>pos<span class="token punctuation">.</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>pos<span class="token punctuation">.</span>y<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>pos<span class="token punctuation">.</span>x<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>pos<span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> pos<span class="token punctuation">;</span> <span class="token punctuation">}</span> status <span class="token function">mazepath</span><span class="token punctuation">(</span><span class="token keyword">int</span> maze<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>postype start<span class="token punctuation">,</span>postype end<span class="token punctuation">)</span><span class="token punctuation">{</span>    slnode h<span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化栈</span>    selemtype e<span class="token punctuation">;</span>    postype curpos<span class="token operator">=</span>start<span class="token punctuation">;</span>    <span class="token keyword">int</span> curstep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pass</span><span class="token punctuation">(</span>curpos<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            maze<span class="token punctuation">[</span>curpos<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>curpos<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span>curstep<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>step<span class="token operator">=</span>curstep<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>di<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>seat<span class="token operator">=</span>curpos<span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curpos<span class="token punctuation">.</span>x<span class="token operator">==</span>end<span class="token punctuation">.</span>x<span class="token operator">&amp;&amp;</span>curpos<span class="token punctuation">.</span>y<span class="token operator">==</span>end<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            curpos<span class="token operator">=</span><span class="token function">nextpos</span><span class="token punctuation">(</span>curpos<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curstep<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>di<span class="token operator">==</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    maze<span class="token punctuation">[</span>e<span class="token punctuation">.</span>seat<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">.</span>seat<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>di<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span>di<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    curpos<span class="token operator">=</span><span class="token function">nextpos</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>seat<span class="token punctuation">,</span>e<span class="token punctuation">.</span>di<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    postype start<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mazepath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无解！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-队列"><a href="#2-队列" class="headerlink" title="2 队列"></a>2 队列</h2><h3 id="2-1-基本概念："><a href="#2-1-基本概念：" class="headerlink" title="2.1 基本概念："></a>2.1 基本概念：</h3><p>队列是运算受限的线性表</p><p>限制：一端插入，另一端删除</p><p>特点：先进先出(FIFO)</p><p>允许插入(入队)的一端称队尾、允许删除(出队)的一端称队头。</p><h3 id="2-2-顺序表示"><a href="#2-2-顺序表示" class="headerlink" title="2.2 顺序表示"></a>2.2 顺序表示</h3><p>==*加代码==</p><h3 id="2-3-链式表示"><a href="#2-3-链式表示" class="headerlink" title="2.3 链式表示"></a>2.3 链式表示</h3><p>==*加代码==</p><h3 id="2-4-应用——离散事件模拟"><a href="#2-4-应用——离散事件模拟" class="headerlink" title="2.4 应用——离散事件模拟"></a>2.4 应用——离散事件模拟</h3><p>假设某银行有N个窗口对外接待客户，从银行开门起不断有客户进入银行，若有窗口空闲，则直接办理业务，反之，则排在人数最少的窗口后面。编写一个程序来模拟银行业务并计算客户在银行逗留的平均时间。</p><p>思路：1. 0分钟：银行开门，假定一客户到达。只要有客户到达，就产生两个随机数，分别表示该客户的业务办理时间和下一客户到达的时间间隔(例如随机数为8和5)，并排在人数最少的队列中。2. 此时可确定，5分钟后将有一个客户到达事件发生，8分钟时将有一个客户离开事件发生。3. 5分钟：客户到达，产生两个随机数(例如25和4)，该客户何时离开？若排在空窗口，30分钟时，否则当他为队头时计算。</p><p>事件链表：客户到达事件(0)和客户离开事件(i)，按事件发生时间非递减有序；窗口队列：模拟排队效果，记录客户到达时间和业务办理时间</p><p><img src="/2021/05/02/zhan-he-dui-lie/%E7%A6%BB%E6%95%A3%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.JPG" alt="离散事件流程图"></p><p>==*加代码==</p><h2 id="3-习题"><a href="#3-习题" class="headerlink" title="3 习题"></a>3 习题</h2><h3 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h3><p>假设一个栈的输入序列为1,2,3，若在入栈的过程中允许出栈，则可能得到的出栈序列是什么？</p><p>① 1入1出， 2入2出，3入3出， 即123；</p><p>② 1入1出， 2、3入，3、2出， 即132；</p><p>③ 1、2入，2出， 3入3出， 即231；</p><p>④ 1、2入，2、1出，3入3出， 即213；</p><p>⑤ 1、2、3入，3、2、1出， 即321；</p><h3 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h3><p>假设一个栈的输入序列是12345，若在入栈的过程中允许出栈，则栈的输出序列12345可能实现吗？ 43512的输出呢？</p><p>12345 可能；43512 不可能</p><h2 id="4-附录——ADT定义"><a href="#4-附录——ADT定义" class="headerlink" title="4 附录——ADT定义"></a>4 附录——ADT定义</h2><h3 id="1-栈-1"><a href="#1-栈-1" class="headerlink" title="1.栈"></a>1.栈</h3><pre class=" language-c"><code class="language-c">ADT Stack <span class="token punctuation">{</span>数据对象：D＝<span class="token punctuation">{</span> ai <span class="token operator">|</span> ai ∈ElemSet<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span> n≥<span class="token number">0</span> <span class="token punctuation">}</span>数据关系：R1＝<span class="token punctuation">{</span> <span class="token operator">&lt;</span>ai<span class="token number">-1</span><span class="token punctuation">,</span> ai <span class="token operator">></span><span class="token operator">|</span> ai<span class="token number">-1</span><span class="token punctuation">,</span> ai∈D<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n <span class="token punctuation">}</span>                      约定an 端为栈顶，a1 端为栈底。基本操作：<span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span>    操作结果：构造一个空栈S<span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span>    初始条件：栈 S 已存在。    操作结果：栈 S 被销毁。<span class="token function">ClearStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span>    初始条件：栈 S 已存在。    操作结果：将 S 清为空栈。<span class="token function">StackEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    初始条件：栈 S 已存在。    操作结果：若栈 S 为空栈，返回 TRUE，否则返回 FALSE。<span class="token function">StackLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span>    初始条件：栈 S 已存在。    操作结果：返回 S 的元素个数，即栈的长度<span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    初始条件：栈 S 已存在且非空。    操作结果：用 e 返回 S 的栈顶元素。<span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    初始条件：栈 S 已存在。    操作结果：插入元素 e 为新的栈顶元素。<span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    初始条件：栈 S 已存在且非空。    操作结果：删除栈顶元素，并用 e 返回其值。<span class="token function">StackTravers</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    初始条件：栈 S 已存在且非空。    操作结果：从栈底开始遍历栈。<span class="token punctuation">}</span> ADT Stack</code></pre><h3 id="2-队列-1"><a href="#2-队列-1" class="headerlink" title="2.队列"></a>2.队列</h3><pre class=" language-c"><code class="language-c">ADT Queue <span class="token punctuation">{</span>数据对象：D＝<span class="token punctuation">{</span> ai <span class="token operator">|</span> ai ∈ElemSet<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span> n≥<span class="token number">0</span> <span class="token punctuation">}</span>数据关系：R1＝<span class="token punctuation">{</span> <span class="token operator">&lt;</span>ai<span class="token number">-1</span><span class="token punctuation">,</span> ai <span class="token operator">></span><span class="token operator">|</span> ai<span class="token number">-1</span><span class="token punctuation">,</span> ai∈D<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n <span class="token punctuation">}</span>                      约定an 端为队尾，a1 端为队头。基本操作：<span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span>    操作结果：构造一个空队列Q。<span class="token function">DestroyQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span>    初始条件：队列Q已存在。    操作结果：队列Q被销毁， 不再存在。<span class="token function">ClearQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span>    初始条件：队列Q已存在。    操作结果：将Q清为空队列。<span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span>    初始条件：队列Q已存在。    操作结果：若Q为空队列，则返回TRUE，否则返回FALSE。<span class="token function">QueueLength</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span>    初始条件：队列Q已存在。    操作结果：返回Q的元素个数，即队列的长度<span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    初始条件：Q为非空队列。    操作结果：用e返回Q的队头元素。<span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    初始条件：队列Q已存在。    操作结果：插入元素e为Q的新的队尾元素。<span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    初始条件：Q为非空队列。    操作结果：删除Q的队头元素，并用e返回其值<span class="token punctuation">}</span>ADT Queue</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树和二叉树（持续更新中）</title>
      <link href="2021/05/02/shu-he-er-cha-shu/"/>
      <url>2021/05/02/shu-he-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<p>This article is mainly about my organization of the data structure.   If you get any problems，you can ask me on <a href="https://github.com/xiaoyue-hou/xiaoyue-hou.github.io">GitHub</a>.</p><h2 id="1-二叉树"><a href="#1-二叉树" class="headerlink" title="1 二叉树"></a>1 二叉树</h2><h3 id="1-1-二叉树的数学内容"><a href="#1-1-二叉树的数学内容" class="headerlink" title="1.1 二叉树的数学内容"></a>1.1 二叉树的数学内容</h3><h4 id="1-1-1-性质"><a href="#1-1-1-性质" class="headerlink" title="1.1.1 性质"></a>1.1.1 性质</h4><p>性质1： 在二叉树的第i层上至多有 $ _2 i$ -1个结点(i&gt;=1)。</p><p>性质2：深度为k的二叉树至多有$ _2 k-1 $个结点（k&gt;=1)</p><p>性质3： 对任何一棵二叉树，如果其终端结点数为n0，度为2的结点数为n2，则 n0＝n2＋1。</p><p>完全二叉树的性质：</p><p>性质4 ：具有 n 个结点的完全二叉树的深度为  $ \log_{2} n+1$</p><p>性质5： 如果对一棵有n个结点的完全二叉树的所有结点按层序编号(自上向下，同层从左到右)，则对任一结点i (1&lt;=i&lt;=n)，有：</p><p>（1）如果i＝1，则结点i无双亲，是二叉树的根；如果i&gt;1，则其双亲是结点 i/2向下取余。</p><p>（2）如果2i&gt;n，则结点i为叶子结点，无左孩子；否则，其左孩子是结点2i。  </p><p>（3）如果2i＋1&gt;n，则结点i无右孩子；否则，其右孩子是结点2i＋1。</p><h4 id="1-1-2-三个推论"><a href="#1-1-2-三个推论" class="headerlink" title="1.1.2 三个推论"></a>1.1.2 三个推论</h4><p>推论1：具有n个结点的二叉树可能的形态数为C(2n,n)</p><p>推论2：完全二叉树中1度结点的个数为0或1</p><p>推论3：具有n个结点的二叉树，其二叉链表中空指针域的个数为n+1</p><h4 id="1-1-3-两个定理"><a href="#1-1-3-两个定理" class="headerlink" title="1.1.3 两个定理"></a>1.1.3 两个定理</h4><p>定理1：n(n&gt;=0)个结点的二叉树，均可由它的中序序列和先序序列唯一确定。</p><p>定理2：n(n&gt;=0)个结点的二叉树，均可由它的中序序列和后序序列唯一确定。</p><h3 id="1-2-二叉树的存储结构"><a href="#1-2-二叉树的存储结构" class="headerlink" title="1.2 二叉树的存储结构"></a>1.2 二叉树的存储结构</h3><h4 id="1-2-1-顺序存储"><a href="#1-2-1-顺序存储" class="headerlink" title="1.2.1 顺序存储"></a>1.2.1 顺序存储</h4><p><img src="/2021/05/02/shu-he-er-cha-shu/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8.png" alt="顺序存储"></p><p>只适用于完全二叉树，根据性质5可以判断双亲和孩子</p><p>==建立顺序表*加代码==</p><h4 id="1-2-2-链式存储（前2种重点）"><a href="#1-2-2-链式存储（前2种重点）" class="headerlink" title="1.2.2 链式存储（前2种重点）"></a>1.2.2 链式存储（前2种重点）</h4><h5 id="1-2-2-1-二叉链表"><a href="#1-2-2-1-二叉链表" class="headerlink" title="1.2.2.1 二叉链表"></a>1.2.2.1 二叉链表</h5><p>直观的表示出了某结点左右孩子的信息</p><p>==建立二叉链表*加代码==</p><h6 id="先根遍历"><a href="#先根遍历" class="headerlink" title="先根遍历"></a>先根遍历</h6><p><img src="/2021/05/02/shu-he-er-cha-shu/%E5%85%88%E6%A0%B9%E9%81%8D%E5%8E%86.png" alt="先根遍历"></p><p>递归算法</p><p>==*加代码==</p><p>非递归算法</p><p>==*加代码==</p><h6 id="中根遍历"><a href="#中根遍历" class="headerlink" title="中根遍历"></a>中根遍历</h6><p><img src="/2021/05/02/shu-he-er-cha-shu/%E4%B8%AD%E6%A0%B9%E9%81%8D%E5%8E%86.png" alt="中根遍历"></p><h6 id="后根遍历"><a href="#后根遍历" class="headerlink" title="后根遍历"></a>后根遍历</h6><p><img src="/2021/05/02/shu-he-er-cha-shu/%E5%90%8E%E6%A0%B9%E9%81%8D%E5%8E%86.png" alt="后根遍历"></p><h5 id="1-2-2-2-线索链表"><a href="#1-2-2-2-线索链表" class="headerlink" title="1.2.2.2 线索链表"></a>1.2.2.2 线索链表</h5><p>为了直观的表示出某结点的前驱和后继</p><h6 id="先序线索化"><a href="#先序线索化" class="headerlink" title="先序线索化"></a>先序线索化</h6><p>==*加代码==</p><h6 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h6><p><img src="/2021/05/02/shu-he-er-cha-shu/%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E5%8C%96.png" alt="中序线索化"></p><p>==*加代码==</p><h6 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h6><p><img src="/2021/05/02/shu-he-er-cha-shu/%E5%90%8E%E5%BA%8F%E7%BA%BF%E7%B4%A2%E5%8C%96.png" alt="后序线索化"></p><p>==*加代码==</p><h5 id="1-2-2-3-三叉链表"><a href="#1-2-2-3-三叉链表" class="headerlink" title="1.2.2.3 三叉链表"></a>1.2.2.3 三叉链表</h5><h5 id="1-2-2-4-双亲链表"><a href="#1-2-2-4-双亲链表" class="headerlink" title="1.2.2.4 双亲链表"></a>1.2.2.4 双亲链表</h5><h2 id="2-树和森林"><a href="#2-树和森林" class="headerlink" title="2 树和森林"></a>2 树和森林</h2><h3 id="2-1-树的存储结构"><a href="#2-1-树的存储结构" class="headerlink" title="2.1 树的存储结构"></a>2.1 树的存储结构</h3><h4 id="2-1-1-双亲表示法"><a href="#2-1-1-双亲表示法" class="headerlink" title="2.1.1 双亲表示法"></a>2.1.1 双亲表示法</h4><p><img src="/2021/05/02/shu-he-er-cha-shu/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.png" alt="双亲表示法"></p><p>==*加代码==</p><h4 id="2-1-2-孩子表示法"><a href="#2-1-2-孩子表示法" class="headerlink" title="2.1.2 孩子表示法"></a>2.1.2 孩子表示法</h4><p><img src="/2021/05/02/shu-he-er-cha-shu/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95.png" alt="孩子表示法"></p><p>==*加代码==</p><h4 id="2-1-3-孩子兄弟表示法"><a href="#2-1-3-孩子兄弟表示法" class="headerlink" title="2.1.3 孩子兄弟表示法"></a>2.1.3 孩子兄弟表示法</h4><p><img src="/2021/05/02/shu-he-er-cha-shu/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.png" alt="孩子兄弟表示法"></p><p>==*加代码==</p><h3 id="2-2-树和二叉树的转换"><a href="#2-2-树和二叉树的转换" class="headerlink" title="2.2 树和二叉树的转换"></a>2.2 树和二叉树的转换</h3><p>树和二叉树均可以使用二叉链表为存储结构，则通过二叉链表作为媒介，树和二叉树可以相互转换</p><p>第一步：加线：在兄弟之间加一连线</p><p>第二步：抹线：对每个结点，除了其左孩子外，去除其与其余孩子之间的关系</p><p>第三步：旋转：横线顺时针旋转45°</p><p><img src="/2021/05/02/shu-he-er-cha-shu/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BD%AC%E6%8D%A2.png" alt="树和二叉树的转换"></p><p>==*加代码==</p><h3 id="2-3-森林和二叉树"><a href="#2-3-森林和二叉树" class="headerlink" title="2.3 森林和二叉树"></a>2.3 森林和二叉树</h3><p>树转换为二叉树后，右子树必为空。</p><p>将森林中的每棵树依次转换为二叉树，并将第i棵二叉树的根作为第i-1棵二叉树根的右孩子(2&lt;=i&lt;=m)。</p><p>如果F={T1,T2,…,Tm}是森林，则可按如下规则转换成一棵二叉树B=(root,LB,RB)</p><p>1.若F为空，则B为空树</p><p>2.若F非空，则B的根root即为森林中第一棵树的根ROOT(T1)；B的左子树LB是从T1中根结点的子树森林F1={T11,T12,…,T1m1}转换而成的二叉树；其右子树RB是从森林F’={T2,T3,…,Tm}转换而成的二叉树</p><h3 id="2-4-赫夫曼树"><a href="#2-4-赫夫曼树" class="headerlink" title="2.4 赫夫曼树"></a>2.4 赫夫曼树</h3><p>带权路径长度最短的树(最优二叉树)</p><p>树的路径长度：从树根到每一个结点的路径长度之和</p><p>结点的带权路径长度：带权结点(叶子)到根的路径长度与权的乘积</p><p>树的带权路径长度：树中所有结点的带权路径长度之和</p><p><img src="/2021/05/02/shu-he-er-cha-shu/%E6%9E%84%E9%80%A0%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91.png" alt="构造赫夫曼树"></p><p>赫夫曼树的应用——赫夫曼编码</p><p><img src="/2021/05/02/shu-he-er-cha-shu/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.png" alt="赫夫曼编码"></p><p><img src="/2021/05/02/shu-he-er-cha-shu/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E8%AF%91%E7%A0%81.png" alt="赫夫曼译码"></p><h2 id="3-习题"><a href="#3-习题" class="headerlink" title="3 习题"></a>3 习题</h2><h3 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h3><p>假设一棵完全二叉树有700个结点，则其叶子结点有多少个？</p><p>根据性质4，700个结点的完全二叉树为10层</p><p>根据性质2，前9层有511个结点，则第10层结点数为189个，均为叶子结点</p><p>根据性质1，第9层结点数为256个，其中前95个为第10层189个结点的双亲，因此第9层的叶子数为161个</p><p>所以叶子结点总数为189+161=350个</p><h3 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h3><p>1.若二叉树T，先序遍历序列为ABCDEF  ，中序遍历序列为CBAEDF ，则其后序遍历序列为？</p><p>C B E F D A</p><p>2.已知二叉树的先序序列为ABDEGCF，中序序列为DBGEACF，则后序序列为(     )</p><p>要点：先序或后序确定根；中序确定左右子树</p><h3 id="例题3："><a href="#例题3：" class="headerlink" title="例题3："></a>例题3：</h3><p>1.某二叉树的先序遍历和后序遍历的序列正好相反，则该二叉树一定是( )</p><p>A 空树或只有一个结点　B 完全二叉树</p><p>C 二叉排序树　D 高度与结点数相同</p><p>要点：先序：根左右；后序：左右根</p><p>2.一棵二叉树的先序遍历序列为abcdefg，它的中序遍历序列可能是( )</p><p>A cabdefg      B abcdefg</p><p>C dacefbg      D adcbgef</p><p>要点：先序：根左右；中序：左根右</p><p>3.如果二叉树结点的先序序列、中序序列和后序序列中，结点A、B的位置都是A在前B在后，则A B可能是兄弟么？A可能是B的双亲么？A可能是B的孩子么？</p><p>要点：先序：根左右；中序：左根右；后序：左右根</p><p>4.一棵二叉树的先序、中序和后序序列分别如下，其中一部分未显示出来。试求出空格处的内容，并画出该树</p><p>先序：（）B（）F（）I  C  E  H（） G</p><p>中序：  D（）K  F  I  A（）E  J  C （）</p><p>后序：（）K（）F  B  H  J （）G（）A</p><h3 id="例题4："><a href="#例题4：" class="headerlink" title="例题4："></a>例题4：</h3><p>==*加代码==</p><p>1.假设二叉树采用二叉链表存储结构，设计一个算法，求前序遍历序列中第K个结点的结点值。</p><p>2.假设二叉树采用二叉链表存储结构，设计一个算法，按层次遍历二叉树</p><p>3.假设二叉树采用二叉链表存储结构，设计一个算法，求二叉树T的宽度(即结点数最多的层次上的结点个数)。</p><p>4.假设二叉树采用二叉链表存储结构，设计一个算法，判断一棵二叉树是否为完全二叉树。</p><p>5.设计一个递归算法，将一棵二叉树逆时针90度打印出来。如下图左的二叉树，以图右的形式打印</p><p>6.设计在一棵中序线索二叉树中查找中序序列的最后一个结点和任一结点中序前驱结点的算法，并在此基础上设计非递归的中序反向遍历算法。</p><p><img src="/2021/05/02/shu-he-er-cha-shu/%E7%AE%97%E6%B3%95%E4%B9%A0%E9%A2%98.png" alt="算法习题"></p><h3 id="例题5："><a href="#例题5：" class="headerlink" title="例题5："></a>例题5：</h3><p>1.引入线索二叉树的目的是（ ）</p><p>  A 加快查找前驱和后继的速度</p><p>  B 为了在二叉树中方便的插入和删除</p><p>  C 为了方便的找到双亲</p><p>  D 使二叉树的遍历结果唯一</p><p>2.判断线索二叉树中*p结点有右孩子的条件是</p><p>P-&gt;rtag==0</p><p>3.在n个结点的线索二叉树上含有的线索数为</p><p> n+1</p><h3 id="例题6："><a href="#例题6：" class="headerlink" title="例题6："></a>例题6：</h3><p>1.给出在先序线索二叉树中查找*p的后继结点的过程。</p><p>2.先序线索中，若*p的左孩子不空，则左孩子为后继；否则其后继为右孩子或右线索。</p><p>3.给出在后序线索二叉树中查找*p的后继结点的过程。</p><p>4.在后序线索中，若*p有右线索，则右线索为其后继；否则，其后继为其双亲结点右子树后序序列中的第一个结点，若双亲无右子树，则后继即为双亲。</p><h2 id="4-附录——ADT定义"><a href="#4-附录——ADT定义" class="headerlink" title="4 附录——ADT定义"></a>4 附录——ADT定义</h2><h3 id="1-二叉树-1"><a href="#1-二叉树-1" class="headerlink" title="1.二叉树"></a>1.二叉树</h3><pre class=" language-c"><code class="language-c">ADT BinaryTree<span class="token punctuation">{</span>数据对象： D＝<span class="token punctuation">{</span>ai<span class="token operator">|</span>ai∈ElemSet<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span> n≥<span class="token number">0</span> <span class="token punctuation">}</span>数据关系： R基本操作：<span class="token function">InitBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DestroyBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ClearBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BiTreeEmpty</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BiTreeDepth</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Assign</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Root</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Value</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Parent</span> <span class="token punctuation">(</span>T<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LeftChild</span> <span class="token punctuation">(</span>T<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">RightChild</span> <span class="token punctuation">(</span>T<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LeftSibling</span> <span class="token punctuation">(</span>T<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">RightSibling</span> <span class="token punctuation">(</span>T<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LevelOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">InsertChild</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> p<span class="token punctuation">,</span> LR<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">DeleteChild</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> p<span class="token punctuation">,</span> LR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> ADT BinaryTree</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性表（持续更新中）</title>
      <link href="2021/05/02/xian-xing-biao/"/>
      <url>2021/05/02/xian-xing-biao/</url>
      
        <content type="html"><![CDATA[<p>This article is mainly about my organization of the data structure.   If you get any problems，you can ask me on <a href="https://github.com/xiaoyue-hou/xiaoyue-hou.github.io">GitHub</a>.</p><h2 id="1-存储方式"><a href="#1-存储方式" class="headerlink" title="1 存储方式"></a>1 存储方式</h2><h3 id="1-1-顺序表示"><a href="#1-1-顺序表示" class="headerlink" title="1.1 顺序表示"></a>1.1 顺序表示</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> addsize 10</span><span class="token macro property">#<span class="token directive keyword">define</span> initsize 100</span><span class="token macro property">#<span class="token directive keyword">define</span> ok 1</span><span class="token macro property">#<span class="token directive keyword">define</span> OVERFLOW 0</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR 0</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> elemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> list<span class="token punctuation">{</span>    elemtype <span class="token operator">*</span>elem<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span>sqlist<span class="token punctuation">;</span>status <span class="token function">InitList</span><span class="token punctuation">(</span>sqlist <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    l<span class="token operator">-></span>elem<span class="token operator">=</span><span class="token punctuation">(</span>elemtype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>initsize<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>elemtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>l<span class="token operator">-></span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span> <span class="token punctuation">;</span>    l<span class="token operator">-></span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>size<span class="token operator">=</span>initsize<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">ListInsert</span><span class="token punctuation">(</span>sqlist <span class="token operator">*</span>l<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>elemtype e<span class="token punctuation">)</span><span class="token punctuation">{</span>    elemtype <span class="token operator">*</span>newelem<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">></span>l<span class="token operator">-></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token punctuation">(</span>l<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        newelem<span class="token operator">=</span><span class="token punctuation">(</span>elemtype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>l<span class="token operator">-></span>elem<span class="token punctuation">,</span><span class="token punctuation">(</span>l<span class="token operator">-></span>size<span class="token operator">+</span>addsize<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>elemtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newelem<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>elem<span class="token operator">=</span>newelem<span class="token punctuation">;</span>        l<span class="token operator">-></span>size<span class="token operator">+</span><span class="token operator">=</span>addsize<span class="token punctuation">;</span>                <span class="token punctuation">}</span>    q<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-></span>elem<span class="token punctuation">[</span>l<span class="token operator">-></span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token punctuation">;</span>p<span class="token operator">></span>q<span class="token punctuation">;</span>p<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">=</span>e<span class="token punctuation">;</span>    l<span class="token operator">-></span>length<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> status <span class="token function">fun1</span><span class="token punctuation">(</span>elemtype p<span class="token punctuation">,</span>elemtype e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span>e<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   status <span class="token function">LocateElem</span><span class="token punctuation">(</span>sqlist l<span class="token punctuation">,</span>elemtype e<span class="token punctuation">,</span><span class="token function">status</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun1<span class="token punctuation">)</span><span class="token punctuation">(</span>elemtype<span class="token punctuation">,</span>elemtype<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     elemtype <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>l<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>fun1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>l<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  status <span class="token function">ListDelete</span><span class="token punctuation">(</span>sqlist <span class="token operator">*</span>l<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>elemtype <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     elemtype <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>l<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>l<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-></span>elem<span class="token punctuation">[</span>l<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">++</span>q<span class="token punctuation">;</span>q<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span>q<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    l<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span>  status <span class="token function">fun2</span><span class="token punctuation">(</span>elemtype m<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span> <span class="token punctuation">}</span>  status    <span class="token function">ListTraverse</span><span class="token punctuation">(</span>sqlist l<span class="token punctuation">,</span> <span class="token function">status</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun2<span class="token punctuation">)</span> <span class="token punctuation">(</span>elemtype m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    elemtype <span class="token operator">*</span>p<span class="token operator">=</span>l<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"遍历检验："</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>l<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>fun2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sqlist l<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>e<span class="token punctuation">,</span>location<span class="token punctuation">,</span>m<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作A </span>    <span class="token function">ListTraverse</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> fun2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B测试: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作B </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token function">ListTraverse</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> fun2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"C测试: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//操作C</span>    location<span class="token operator">=</span><span class="token function">LocateElem</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>fun1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第一个个位5的位置：%d\n"</span><span class="token punctuation">,</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListTraverse</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> fun2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D测试: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//操作D</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除的偶数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         m<span class="token operator">=</span><span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             i<span class="token operator">--</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListTraverse</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> fun2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><h3 id="1-2-链式表示"><a href="#1-2-链式表示" class="headerlink" title="1.2 链式表示"></a>1.2 链式表示</h3><h4 id="1-2-1-单链表"><a href="#1-2-1-单链表" class="headerlink" title="1.2.1 单链表"></a>1.2.1 单链表</h4><h5 id="练习1-逆序插入"><a href="#练习1-逆序插入" class="headerlink" title="练习1 逆序插入"></a>练习1 逆序插入</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token punctuation">}</span>Node<span class="token punctuation">,</span><span class="token operator">*</span>linklist<span class="token punctuation">;</span>linklist <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入测试数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    linklist h<span class="token punctuation">,</span>r<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    h<span class="token operator">=</span><span class="token punctuation">(</span>linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token operator">=</span>h<span class="token punctuation">;</span>    r<span class="token operator">-></span>next<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s<span class="token operator">=</span><span class="token punctuation">(</span>linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data<span class="token operator">=</span>x<span class="token punctuation">;</span>        s<span class="token operator">-></span>next<span class="token operator">=</span>r<span class="token operator">-></span>next<span class="token punctuation">;</span>        r<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">funa</span><span class="token punctuation">(</span>linklist head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A:请输出链表结点值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     linklist p<span class="token punctuation">;</span>    p<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">funb</span><span class="token punctuation">(</span>linklist head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B:请输出链表结点值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    linklist p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    p<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    q<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            s<span class="token operator">=</span><span class="token punctuation">(</span>linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data<span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>            q<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>s<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>                      q<span class="token operator">=</span>p<span class="token punctuation">;</span>             p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>linklist head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"C:请输出链表结点值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    linklist p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    p<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    q<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            s<span class="token operator">=</span>p<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>            q<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            q<span class="token operator">=</span>p<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         p<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    linklist head<span class="token punctuation">;</span>    head<span class="token operator">=</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">funa</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">funb</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*1 2 3 4 5 -1*/</span> </code></pre><h5 id="练习2-求最值"><a href="#练习2-求最值" class="headerlink" title="练习2 求最值"></a>练习2 求最值</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>Node<span class="token punctuation">,</span><span class="token operator">*</span>Linklist<span class="token punctuation">;</span>Linklist <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建链表 </span><span class="token punctuation">{</span>    Linklist h<span class="token punctuation">,</span>r<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    h<span class="token operator">=</span><span class="token punctuation">(</span>Linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token operator">=</span>h<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">=</span>s<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//以-1作结束标志 </span>    <span class="token punctuation">{</span>        s<span class="token operator">=</span><span class="token punctuation">(</span>Linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>        r<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    r<span class="token operator">-></span>next<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span>Linklist listhead<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>big<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>small<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求最值并输出 </span><span class="token punctuation">{</span>    Linklist p<span class="token punctuation">;</span>    p<span class="token operator">=</span>listhead<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">*</span>big<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token operator">*</span>small<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>p<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token operator">></span><span class="token operator">*</span>big<span class="token punctuation">)</span> <span class="token operator">*</span>big<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token operator">&lt;</span><span class="token operator">*</span>small<span class="token punctuation">)</span> <span class="token operator">*</span>small<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//主函数 </span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max<span class="token punctuation">,</span>min<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入测试数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Linklist head<span class="token punctuation">;</span>    head<span class="token operator">=</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">find</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token operator">&amp;</span>max<span class="token punctuation">,</span><span class="token operator">&amp;</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输出最值：min=%d max=%d\n"</span><span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*测试样例 4 25 90 34 17 86 63 48 51 15 -1*/</span></code></pre><h4 id="1-2-2-静态链表"><a href="#1-2-2-静态链表" class="headerlink" title="1.2.2 静态链表"></a>1.2.2 静态链表</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> maxsize 100</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> elemtype<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    elemtype data<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span>component<span class="token punctuation">,</span>sqlinklist<span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>maxsize<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    space<span class="token punctuation">[</span>maxsize<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">malloc_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">free_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    space<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">create_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span>r<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    s<span class="token operator">=</span><span class="token function">malloc_list</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i<span class="token operator">=</span><span class="token function">malloc_list</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        space<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>i<span class="token punctuation">;</span>        r<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    space<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>elemtype b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">malloc_list</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span>    space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">=</span>b<span class="token punctuation">;</span>    space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>space<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    space<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">delete_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span>elemtype c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    q<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span>q<span class="token punctuation">;</span>        q<span class="token operator">=</span>space<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>space<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">==</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     space<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>space<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token function">free_list</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">locate_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span>elemtype c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> q<span class="token punctuation">;</span>    q<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>space<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>space<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">==</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">traverse_list</span><span class="token punctuation">(</span>sqlinklist space<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> q<span class="token operator">=</span>space<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>space<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">=</span>space<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sqlinklist space<span class="token punctuation">;</span>    <span class="token function">init_list</span><span class="token punctuation">(</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">=</span><span class="token function">create_list</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        r<span class="token operator">=</span>space<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>space<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">locate_list</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span>s<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">delete_list</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span>s<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">insert_list</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">traverse_list</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><h4 id="1-2-3-循环链表"><a href="#1-2-3-循环链表" class="headerlink" title="1.2.3 循环链表"></a>1.2.3 循环链表</h4><p>将链表的最后一个结点与第一个结点连接起来，可从任意结点出发访问其它结点</p><h4 id="1-2-4-双向链表"><a href="#1-2-4-双向链表" class="headerlink" title="1.2.4 双向链表"></a>1.2.4 双向链表</h4><p>每个结点中有两个指针，一个指向其后继结点，另一个指向其前趋结点</p><h2 id="2-习题"><a href="#2-习题" class="headerlink" title="2 习题"></a>2 习题</h2><p>1.假设:有两个集合 A 和 B 分别用两个线性表 LA 和 LB 表示，设计算法，求一个新的集合A＝A∪B</p><p>==*加代码==</p><p>2.已知线性表LA和LB中的数据元素按值非递减有序排列，现要求将LA和LB归并为一个新的线性表LC，且LC中的数据元素仍按值非递减有序排列。</p><p>==*加代码==</p><h2 id="3-附录——ADT定义"><a href="#3-附录——ADT定义" class="headerlink" title="3 附录——ADT定义"></a>3 附录——ADT定义</h2><pre class=" language-c"><code class="language-c">ADT List <span class="token punctuation">{</span>数据对象：D＝<span class="token punctuation">{</span>ai<span class="token operator">|</span>ai∈ElemSet<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span> n≥<span class="token number">0</span> <span class="token punctuation">}</span>数据关系：R1＝<span class="token punctuation">{</span><span class="token operator">&lt;</span>ai<span class="token number">-1</span> <span class="token punctuation">,</span>ai<span class="token operator">></span><span class="token operator">|</span>ai<span class="token number">-1</span> <span class="token punctuation">,</span>ai∈D<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n <span class="token punctuation">}</span>基本操作：<span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span>    操作结果：构造一个空的线性表L。<span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>    初始条件：线性表L已存在。    操作结果：返回L中元素个数。<span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    初始条件：线性表L已存在， <span class="token number">1</span>≤i≤<span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>    操作结果：用e返回L中第i个元素的值<span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token function">compare</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    初始条件：线性表L已存在<span class="token punctuation">.</span>    操作结果：返回L中第<span class="token number">1</span>个与e满足关系<span class="token function">compare</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>的元素的位序，不存在则返回<span class="token number">0</span>。重要：ADT中<span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>这种形式，语言级别对应为函数指针！<span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    初始条件：L已存在，<span class="token number">1</span>≤i≤<span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    操作结果：在L的第i个位置插入新的元素e，L的长度增<span class="token number">1</span><span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span>    初始条件：L已存在且非空，<span class="token number">1</span>≤i≤<span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>    操作结果：删除L的第i个元素，并用e返回其值，L的长度减<span class="token number">1</span><span class="token function">ListTraverse</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token function">visit</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    初始条件：线性表L已存在    操作结果：依次对L的每个数据元素调用<span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数，若<span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>失败则操作失败<span class="token punctuation">}</span>ADT  List</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>递归问题算法（持续更新中）</title>
      <link href="2021/05/02/di-gui-wen-ti/"/>
      <url>2021/05/02/di-gui-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>This article is mainly about my organization of the data structure.   If you get any problems，you can ask me on <a href="https://github.com/xiaoyue-hou/xiaoyue-hou.github.io">GitHub</a>.</p><h2 id="1-n"><a href="#1-n" class="headerlink" title="1 n!"></a>1 n!</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>  x<span class="token operator">=</span>n<span class="token operator">*</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-斐波那契数列第n项的值"><a href="#2-斐波那契数列第n项的值" class="headerlink" title="2 斐波那契数列第n项的值"></a>2 斐波那契数列第n项的值</h2><p><img src="/2021/05/02/di-gui-wen-ti/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.png" alt="斐波那契"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">long</span>  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-n阶汉诺塔"><a href="#3-n阶汉诺塔" class="headerlink" title="3 n阶汉诺塔"></a>3 n阶汉诺塔</h2><p><img src="/2021/05/02/di-gui-wen-ti/%E6%B1%89%E8%AF%BA%E5%A1%94.png" alt="汉诺塔"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span>"<span class="token operator">%</span>d<span class="token punctuation">.</span>move disk<span class="token operator">%</span>d from <span class="token operator">%</span>c to                      <span class="token operator">%</span>c\n"<span class="token punctuation">,</span><span class="token operator">++</span>c<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        </code></pre><h2 id="4-分析fun函数"><a href="#4-分析fun函数" class="headerlink" title="4 分析fun函数"></a>4 分析fun函数</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//fun1函数功能：求前序遍历序列中第k个结点</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"my.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> TElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTNode<span class="token punctuation">{</span>  TElemType data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span><span class="token operator">*</span>BiTree<span class="token punctuation">;</span>Status <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> ch<span class="token punctuation">;</span>  ch<span class="token operator">=</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token operator">*</span>T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token operator">*</span>T<span class="token operator">=</span><span class="token punctuation">(</span>BiTNode<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span>    <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span><span class="token function">Status</span> <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>TElemType e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span>visit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span>visit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">PrintElement</span><span class="token punctuation">(</span>TElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">putchar</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>BiTree <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>p<span class="token operator">=</span>T<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token function">fun1</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fun1</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Null "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  BiTree T<span class="token punctuation">,</span>p<span class="token punctuation">;</span>  FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>  <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"in.dat"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>PrintElement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fun1</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">   本题先创建了一个二叉树，然后通过先序遍历输出二叉树顺序为ABDEHCFIJKG，由顺序可知第六个结点对应的结点值应该是C。​  下面的思路就是在先序遍历过程中添加一个计数器n，若n等于k就将对应的结点地址传回去，在主函数中输出这个结点值。主要体现在fun1这个函数中。​  在fun1中，第一次执行就是先把根节点（A）传过来，（A）结点存在计数器加一<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>且访问左孩子<span class="token punctuation">(</span>B<span class="token punctuation">)</span>，（B）结点存在计数器加一<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>且访问左孩子<span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">,</span>（D）结点存在计数器加一<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>且访问左孩子（调用fun1），此时左孩子不存在，直接执行<span class="token keyword">else</span>语句输出null并输出此时的n<span class="token operator">=</span><span class="token number">3</span>。fun1函数第一次执行完。​  返回到调用处即（D）处访问他的右孩子（调用fun1），也不存在直接执行<span class="token keyword">else</span>输出null并输出此时的n<span class="token operator">=</span><span class="token number">3</span>。fun1函数第二次执行完。​  返回到调用处即（D）处，（D）结点存在输出结点值并输出此时的n<span class="token operator">=</span><span class="token number">3</span>，fun1函数第三次执行完。​  返回到调用处即（B）处访问他的右孩子（E），（E）结点存在计数器加一<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>且访问左孩子<span class="token punctuation">(</span>H<span class="token punctuation">)</span>，（H）结点存在计数器加一<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>且访问左孩子（调用fun1），此时左孩子不存在，直接执行<span class="token keyword">else</span>语句输出null并输出此时的n<span class="token operator">=</span><span class="token number">5</span>。fun1函数第四次执行完。​  返回到调用处即（H）处访问他的右孩子（调用fun1），右孩子不存在直接执行<span class="token keyword">else</span>输出null并输出此时的n<span class="token operator">=</span><span class="token number">5</span>。fun1函数第五次执行完。​  返回到调用处即（H）处，（H）结点存在输出结点值并输出此时的n<span class="token operator">=</span><span class="token number">5</span>，fun1函数第六次执行完。​  返回到调用处即（E）处访问他的右孩子（调用fun1），此时右孩子不存在，直接执行<span class="token keyword">else</span>语句输出null并输出此时的n<span class="token operator">=</span><span class="token number">5</span>。fun1函数第七次执行完。​  返回到调用处即（E）处，（E）结点存在输出结点值并输出此时的n<span class="token operator">=</span><span class="token number">5</span>，fun1函数第八次执行完。​  返回到调用处即（B）处，（B）结点存在输出结点值并输出此时的n<span class="token operator">=</span><span class="token number">5</span>，fun1函数第九次执行完。​  返回到调用处即（A）处，（A）结点存在开始访问右孩子<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>像以上的顺序一样访问右子树，到访问（C）时n<span class="token operator">=</span><span class="token number">6</span><span class="token operator">=</span>k，将（C）的地址通过形参传回主函数，最后在主函数中输出总结：​  <span class="token number">1</span><span class="token punctuation">.</span>此过程n的值是先序序列的访问顺序​  <span class="token number">2</span><span class="token punctuation">.</span>每当程序fun1执行完一次，便会有内容输出，且输出内容相当于后序遍历输出每个节点值（包含空结点），以及此时有效结点数（不包含空结点）​  <span class="token number">3</span><span class="token punctuation">.</span>输出规律<span class="token punctuation">:</span>每次从访问到一个空的结点开始（此时有效结点数即不为空的结点数是n），到访问到下一个不为空的结点（这个结点是先序遍历中的第n<span class="token operator">+</span><span class="token number">1</span>个）或访问完 整个树（此情况是没有新结点可访问了）结束，中间fun1完成了几次执行，就输出几次n（n为第一个空的）。例如<span class="token punctuation">:</span>​  <span class="token number">1</span><span class="token punctuation">.</span>第一次访问到空结点，是（D）的左孩子（n<span class="token operator">=</span><span class="token number">3</span>），下一个不为空的结点是（E），中间经过了<span class="token number">3</span>次执行过程，所以输出了<span class="token number">3</span>次<span class="token number">3</span>​  <span class="token number">2</span><span class="token punctuation">.</span>接下来访问到空结点，是（H）的左孩子（n<span class="token operator">=</span><span class="token number">5</span>）<span class="token punctuation">,</span>下一个不为空的结点是（C）<span class="token punctuation">,</span>中间经过了<span class="token number">6</span>次执行过程，所以输出了<span class="token number">6</span>次<span class="token number">5</span>​  <span class="token number">3</span><span class="token punctuation">.</span>接下来访问到空结点，是（J）的左孩子（n<span class="token operator">=</span><span class="token number">9</span>）<span class="token punctuation">,</span>下一个不为空的结点是（K）<span class="token punctuation">,</span>中间经过了<span class="token number">3</span>次执行过程，所以输出了<span class="token number">3</span>次<span class="token number">9</span>​  <span class="token number">4</span><span class="token punctuation">.</span>接下来访问到空结点，是（K）的左孩子（n<span class="token operator">=</span><span class="token number">10</span>）<span class="token punctuation">,</span>下一个不为空的结点是（G）<span class="token punctuation">,</span>中间经过了<span class="token number">6</span>次执行过程，所以输出了<span class="token number">6</span>次<span class="token number">10</span>​  <span class="token number">5</span><span class="token punctuation">.</span>接下来访问到空结点，是（G）的左孩子（n<span class="token operator">=</span><span class="token number">11</span>）<span class="token punctuation">,</span>到访问完树结束<span class="token punctuation">,</span>中间经过了<span class="token number">5</span>次执行过程，所以输出了<span class="token number">5</span>次<span class="token number">11</span>。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BASNet源码分析</title>
      <link href="2021/04/28/basnet-yuan-ma-fen-xi/"/>
      <url>2021/04/28/basnet-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>This article is mainly about my analysis of  basnet source code.  If you get any problems，you can ask me on the <a href="https://github.com/xiaoyue-hou/xiaoyue-hou.github.io">GitHub</a>.</p><h2 id="1-data-loader"><a href="#1-data-loader" class="headerlink" title="1. data_loader"></a>1. data_loader</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token punctuation">,</span> division    <span class="token comment" spellcheck="true">#在版本2中使用3中功能</span><span class="token keyword">import</span> glob                                        <span class="token comment" spellcheck="true">#用于文件操作的模块</span><span class="token keyword">import</span> torch                                       <span class="token comment" spellcheck="true">#包含多维张量的数据结构及运算</span><span class="token keyword">from</span> skimage <span class="token keyword">import</span> io<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> color           <span class="token comment" spellcheck="true">#数字图像处理包</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np                                 <span class="token comment" spellcheck="true">#用于数学数组，矩阵计算</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt                    <span class="token comment" spellcheck="true">#绘图</span><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader   <span class="token comment" spellcheck="true">#加载数据集</span><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token punctuation">,</span> utils          <span class="token comment" spellcheck="true">#对PIL.Image进行变换</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image                              <span class="token comment" spellcheck="true">#图像处理</span></code></pre><h3 id="1-1-调整图片大小"><a href="#1-1-调整图片大小" class="headerlink" title="1.1 调整图片大小"></a>1.1 调整图片大小</h3><h4 id="1-1-1-缩放到输出大小——正方形"><a href="#1-1-1-缩放到输出大小——正方形" class="headerlink" title="1.1.1 缩放到输出大小——正方形"></a>1.1.1 缩放到输出大小——正方形</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RescaleT</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span><span class="token punctuation">(</span>int<span class="token punctuation">,</span>tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#判断output_size与元组展平列表是否类型相同，若不相同抛出异常</span>        self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> output_size    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        image<span class="token punctuation">,</span> label <span class="token operator">=</span> sample<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sample<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        h<span class="token punctuation">,</span> w <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> h <span class="token operator">></span> w<span class="token punctuation">:</span>                new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size<span class="token operator">*</span>h<span class="token operator">/</span>w<span class="token punctuation">,</span>self<span class="token punctuation">.</span>output_size            <span class="token keyword">else</span><span class="token punctuation">:</span>                new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span>self<span class="token punctuation">.</span>output_size<span class="token operator">*</span>w<span class="token operator">/</span>h        <span class="token keyword">else</span><span class="token punctuation">:</span>            new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size        new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> int<span class="token punctuation">(</span>new_h<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>new_w<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># #resize the image to new_h x new_w and convert image from range [0,255] to [0,1]</span>        <span class="token comment" spellcheck="true"># img = transform.resize(image,(new_h,new_w),mode='constant')</span>        <span class="token comment" spellcheck="true"># lbl = transform.resize(label,(new_h,new_w),mode='constant', order=0, preserve_range=True)</span>        img <span class="token operator">=</span> transform<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">)</span>        lbl <span class="token operator">=</span> transform<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>label<span class="token punctuation">,</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> preserve_range<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span>img<span class="token punctuation">,</span><span class="token string">'label'</span><span class="token punctuation">:</span>lbl<span class="token punctuation">}</span></code></pre><h4 id="1-1-2-按比例缩放到输出大小"><a href="#1-1-2-按比例缩放到输出大小" class="headerlink" title="1.1.2 按比例缩放到输出大小"></a>1.1.2 按比例缩放到输出大小</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rescale</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#将图像按比例缩放到输出大小（较小边为output_size）</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span><span class="token punctuation">(</span>int<span class="token punctuation">,</span>tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> output_size    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        image<span class="token punctuation">,</span> label <span class="token operator">=</span> sample<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sample<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        h<span class="token punctuation">,</span> w <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> h <span class="token operator">></span> w<span class="token punctuation">:</span>                new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size<span class="token operator">*</span>h<span class="token operator">/</span>w<span class="token punctuation">,</span>self<span class="token punctuation">.</span>output_size            <span class="token keyword">else</span><span class="token punctuation">:</span>                new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span>self<span class="token punctuation">.</span>output_size<span class="token operator">*</span>w<span class="token operator">/</span>h        <span class="token keyword">else</span><span class="token punctuation">:</span>            new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size        new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> int<span class="token punctuation">(</span>new_h<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>new_w<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># #resize the image to new_h x new_w and convert image from range [0,255] to [0,1]</span>        img <span class="token operator">=</span> transform<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token punctuation">(</span>new_h<span class="token punctuation">,</span>new_w<span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">)</span>        lbl <span class="token operator">=</span> transform<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>label<span class="token punctuation">,</span><span class="token punctuation">(</span>new_h<span class="token punctuation">,</span>new_w<span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> preserve_range<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span>img<span class="token punctuation">,</span><span class="token string">'label'</span><span class="token punctuation">:</span>lbl<span class="token punctuation">}</span></code></pre><h4 id="1-1-3-从中心剪裁成输出大小"><a href="#1-1-3-从中心剪裁成输出大小" class="headerlink" title="1.1.3 从中心剪裁成输出大小"></a>1.1.3 从中心剪裁成输出大小</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CenterCrop</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> <span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> len<span class="token punctuation">(</span>output_size<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>            self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> output_size    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        image<span class="token punctuation">,</span> label <span class="token operator">=</span> sample<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sample<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        h<span class="token punctuation">,</span> w <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size        <span class="token comment" spellcheck="true"># print("h: %d, w: %d, new_h: %d, new_w: %d"%(h, w, new_h, new_w))</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">>=</span> new_h<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>w <span class="token operator">>=</span> new_w<span class="token punctuation">)</span><span class="token punctuation">)</span>        h_offset <span class="token operator">=</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">-</span> new_h<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        w_offset <span class="token operator">=</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>w <span class="token operator">-</span> new_w<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        image <span class="token operator">=</span> image<span class="token punctuation">[</span>h_offset<span class="token punctuation">:</span> h_offset <span class="token operator">+</span> new_h<span class="token punctuation">,</span> w_offset<span class="token punctuation">:</span> w_offset <span class="token operator">+</span> new_w<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#从中心裁剪</span>        label <span class="token operator">=</span> label<span class="token punctuation">[</span>h_offset<span class="token punctuation">:</span> h_offset <span class="token operator">+</span> new_h<span class="token punctuation">,</span> w_offset<span class="token punctuation">:</span> w_offset <span class="token operator">+</span> new_w<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span> image<span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">:</span> label<span class="token punctuation">}</span></code></pre><h4 id="1-1-4-随机剪裁成输出大小"><a href="#1-1-4-随机剪裁成输出大小" class="headerlink" title="1.1.4 随机剪裁成输出大小"></a>1.1.4 随机剪裁成输出大小</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RandomCrop</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> <span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> len<span class="token punctuation">(</span>output_size<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>            self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> output_size    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        image<span class="token punctuation">,</span> label <span class="token operator">=</span> sample<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sample<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        h<span class="token punctuation">,</span> w <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> self<span class="token punctuation">.</span>output_size        top <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">-</span> new_h<span class="token punctuation">)</span>        left <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">-</span> new_w<span class="token punctuation">)</span>        image <span class="token operator">=</span> image<span class="token punctuation">[</span>top<span class="token punctuation">:</span> top <span class="token operator">+</span> new_h<span class="token punctuation">,</span> left<span class="token punctuation">:</span> left <span class="token operator">+</span> new_w<span class="token punctuation">]</span>        label <span class="token operator">=</span> label<span class="token punctuation">[</span>top<span class="token punctuation">:</span> top <span class="token operator">+</span> new_h<span class="token punctuation">,</span> left<span class="token punctuation">:</span> left <span class="token operator">+</span> new_w<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span> image<span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">:</span> label<span class="token punctuation">}</span></code></pre><h3 id="1-2-将n维数组转换成张量"><a href="#1-2-将n维数组转换成张量" class="headerlink" title="1.2 将n维数组转换成张量"></a>1.2 将n维数组转换成张量</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ToTensor</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#</span>    <span class="token triple-quoted-string string">"""Convert ndarrays in sample to Tensors."""</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        image<span class="token punctuation">,</span> label <span class="token operator">=</span> sample<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sample<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        tmpImg <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#zeros返回来一个给定形状和类型的用0填充的数组，是x行，y列，z层的</span>        tmpLbl <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>label<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        image <span class="token operator">=</span> image<span class="token operator">/</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将范围调至0-1 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> label        <span class="token keyword">else</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> label<span class="token operator">/</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        <span class="token keyword">if</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#单色度</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.456</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.224</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.406</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.225</span>        tmpLbl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># change the r,g,b to b,r,g from [0,255] to [0,1]</span>        <span class="token comment" spellcheck="true">#transforms.Normalize(mean = (0.485, 0.456, 0.406), std = (0.229, 0.224, 0.225)) mean和std表示图像集每个通道的均值和均方差序列，训练imagenet数据时通常设置为这些数</span>        tmpImg <span class="token operator">=</span> tmpImg<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#类似矩阵转置</span>        tmpLbl <span class="token operator">=</span> label<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>tmpImg<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'label'</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>tmpLbl<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#将n维数组转换成张量,返回的张量和ndarray共享同一内存。对张量的修改将反映在ndarray中，反之亦然。返回的张量是不能调整大小的。</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ToTensorLab</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#与上一个相同，但考虑到了颜色空间</span>    <span class="token triple-quoted-string string">"""Convert ndarrays in sample to Tensors."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        image<span class="token punctuation">,</span> label <span class="token operator">=</span> sample<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sample<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        tmpLbl <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>label<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> label        <span class="token keyword">else</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> label<span class="token operator">/</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># change the color space从RGB颜色空间转为LAB颜色空间，它是用数字化的方法来描述人的视觉感应。</span>        <span class="token comment" spellcheck="true">#Lab颜色空间中的L分量用于表示像素的亮度，取值范围是[0,100],表示从纯黑到纯白；a表示从红色到绿色的范围，取值范围是[127,-128]；b表示从黄色到蓝色的范围，取值范围是[127,-128]。</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># with rgb and Lab colors</span>            tmpImg <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmpImgt <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>                tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>                tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmpImgt <span class="token operator">=</span> image            tmpImgtl <span class="token operator">=</span> color<span class="token punctuation">.</span>rgb2lab<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将RGB三元组转换成lab三元组</span>            <span class="token comment" spellcheck="true"># nomalize image to range [0,1]</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3个通道是rgb</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3个通道是lab</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImgtl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># tmpImg = tmpImg/(np.max(tmpImg)-np.min(tmpImg))</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#与均值的差/均方差</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#with Lab color</span>            tmpImg <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmpImg <span class="token operator">=</span> image            tmpImg <span class="token operator">=</span> color<span class="token punctuation">.</span>rgb2lab<span class="token punctuation">(</span>tmpImg<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># tmpImg = tmpImg/(np.max(tmpImg)-np.min(tmpImg))</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># with rgb color</span>            tmpImg <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            image <span class="token operator">=</span> image<span class="token operator">/</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>image<span class="token punctuation">)</span>            <span class="token keyword">if</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.485</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.229</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.456</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.224</span>                tmpImg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.406</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0.225</span>        tmpLbl<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># change the r,g,b to b,r,g from [0,255] to [0,1]</span>        <span class="token comment" spellcheck="true">#transforms.Normalize(mean = (0.485, 0.456, 0.406), std = (0.229, 0.224, 0.225))</span>        tmpImg <span class="token operator">=</span> tmpImg<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        tmpLbl <span class="token operator">=</span> label<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>tmpImg<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'label'</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>tmpLbl<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-读取照片转换成数组"><a href="#1-3-读取照片转换成数组" class="headerlink" title="1.3  读取照片转换成数组"></a>1.3  读取照片转换成数组</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SalObjDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>img_name_list<span class="token punctuation">,</span>lbl_name_list<span class="token punctuation">,</span>transform<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># self.root_dir = root_dir</span>        <span class="token comment" spellcheck="true"># self.image_name_list = glob.glob(image_dir+'*.png')</span>        <span class="token comment" spellcheck="true"># self.label_name_list = glob.glob(label_dir+'*.png')</span>        self<span class="token punctuation">.</span>image_name_list <span class="token operator">=</span> img_name_list        self<span class="token punctuation">.</span>label_name_list <span class="token operator">=</span> lbl_name_list        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image_name_list<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#image=Image.open(self.image_name_list[idx])#io.imread(self.image_name_list[idx])</span><span class="token comment" spellcheck="true">#label = Image.open(self.label_name_list[idx])#io.imread(self.label_name_list[idx])</span>        image <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image_name_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#用于读取图片文件。io.imread读出图片格式是uint8(unsigned int)；value是numpy array。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#读入标签，考虑了标签是否存在情况</span>            label_3 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            label_3 <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label_name_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("len of label3")</span>        <span class="token comment" spellcheck="true">#print(len(label_3.shape))</span>        <span class="token comment" spellcheck="true">#print(label_3.shape)</span>        label <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>label_3<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#初始化标签数组值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span>len<span class="token punctuation">(</span>label_3<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> label_3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">==</span>len<span class="token punctuation">(</span>label_3<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> label_3        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span>len<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">2</span><span class="token operator">==</span>len<span class="token punctuation">(</span>label<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#将照片和标签都整成3维的</span>            label <span class="token operator">=</span> label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">==</span>len<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">2</span><span class="token operator">==</span>len<span class="token punctuation">(</span>label<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            image <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>            label <span class="token operator">=</span> label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># #vertical flipping垂直翻转</span>        <span class="token comment" spellcheck="true"># # fliph = np.random.randn(1)</span>        <span class="token comment" spellcheck="true"># flipv = np.random.randn(1)</span>        <span class="token comment" spellcheck="true">#randn函数返回一个或一组样本，具有标准正态分布。dn表示每个维度，返回值为指定维度的array</span>        <span class="token comment" spellcheck="true"># if flipv>0:</span>        <span class="token comment" spellcheck="true">#     image = image[::-1,:,:]#表示将图像向下翻转180°</span>        <span class="token comment" spellcheck="true">#     label = label[::-1,:,:]</span>        <span class="token comment" spellcheck="true"># #vertical flip</span>        sample <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'image'</span><span class="token punctuation">:</span>image<span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">:</span>label<span class="token punctuation">}</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">:</span>            sample <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>sample<span class="token punctuation">)</span>        <span class="token keyword">return</span> sample</code></pre><h2 id="2-basnet-train"><a href="#2-basnet-train" class="headerlink" title="2. basnet_train"></a>2. basnet_train</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision <span class="token comment" spellcheck="true">#torchvision包含一些常用的数据集、模型、转换函数等</span><span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable <span class="token comment" spellcheck="true">#动态变化求梯度，可逐渐生成计算图，将计算节点连接起来，进行误差反向传递</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn <span class="token comment" spellcheck="true">#用于创建和训练神经网络</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token comment" spellcheck="true">#加载数据集</span><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token punctuation">,</span> utils<span class="token comment" spellcheck="true">#对PIL.Image进行变换</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token comment" spellcheck="true">#实现了各种优化算法的库</span><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> standard_transforms<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> glob<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> Rescale<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> RescaleT<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> RandomCrop<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> CenterCrop<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> ToTensor<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> ToTensorLab<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> SalObjDataset<span class="token keyword">from</span> model <span class="token keyword">import</span> BASNet<span class="token keyword">import</span> pytorch_ssim<span class="token keyword">import</span> pytorch_iou</code></pre><h3 id="2-1-损失函数"><a href="#2-1-损失函数" class="headerlink" title="2.1 损失函数"></a>2.1 损失函数</h3><pre class=" language-python"><code class="language-python">bce_loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>BCELoss<span class="token punctuation">(</span>size_average<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算目标值和预测值之间的二进制交叉熵损失函数。返回loss均值</span>ssim_loss <span class="token operator">=</span> pytorch_ssim<span class="token punctuation">.</span>SSIM<span class="token punctuation">(</span>window_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>size_average<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>iou_loss <span class="token operator">=</span> pytorch_iou<span class="token punctuation">.</span>IOU<span class="token punctuation">(</span>size_average<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bce_ssim_loss</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    bce_out <span class="token operator">=</span> bce_loss<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>target<span class="token punctuation">)</span>    ssim_out <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> ssim_loss<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>target<span class="token punctuation">)</span>    iou_out <span class="token operator">=</span> iou_loss<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>target<span class="token punctuation">)</span>    loss <span class="token operator">=</span> bce_out <span class="token operator">+</span> ssim_out <span class="token operator">+</span> iou_out    <span class="token keyword">return</span> loss<span class="token keyword">def</span> <span class="token function">muti_bce_loss_fusion</span><span class="token punctuation">(</span>d0<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">,</span> d5<span class="token punctuation">,</span> d6<span class="token punctuation">,</span> d7<span class="token punctuation">,</span> labels_v<span class="token punctuation">)</span><span class="token punctuation">:</span>    loss0 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d0<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    loss1 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d1<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    loss2 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d2<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    loss3 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d3<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    loss4 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d4<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    loss5 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d5<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    loss6 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d6<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    loss7 <span class="token operator">=</span> bce_ssim_loss<span class="token punctuation">(</span>d7<span class="token punctuation">,</span>labels_v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#ssim0 = 1 - ssim_loss(d0,labels_v)</span>    <span class="token comment" spellcheck="true"># iou0 = iou_loss(d0,labels_v)</span>    <span class="token comment" spellcheck="true">#loss = torch.pow(torch.mean(torch.abs(labels_v-d0)),2)*(5.0*loss0 + loss1 + loss2 + loss3 + loss4 + loss5) #+ 5.0*lossa</span>    loss <span class="token operator">=</span> loss0 <span class="token operator">+</span> loss1 <span class="token operator">+</span> loss2 <span class="token operator">+</span> loss3 <span class="token operator">+</span> loss4 <span class="token operator">+</span> loss5 <span class="token operator">+</span> loss6 <span class="token operator">+</span> loss7<span class="token comment" spellcheck="true">#+ 5.0*lossa</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"l0: %3f, l1: %3f, l2: %3f, l3: %3f, l4: %3f, l5: %3f, l6: %3f\n"</span><span class="token operator">%</span><span class="token punctuation">(</span>loss0<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>loss1<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>loss2<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>loss3<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>loss4<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>loss5<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>loss6<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("BCE: l1:%3f, l2:%3f, l3:%3f, l4:%3f, l5:%3f, la:%3f, all:%3f\n"%(loss1.data[0],loss2.data[0],loss3.data[0],loss4.data[0],loss5.data[0],lossa.data[0],loss.data[0]))</span>    <span class="token keyword">return</span> loss0<span class="token punctuation">,</span> loss</code></pre><h3 id="2-2-设置训练数据集的目录"><a href="#2-2-设置训练数据集的目录" class="headerlink" title="2.2 设置训练数据集的目录"></a>2.2 设置训练数据集的目录</h3><pre class=" language-python"><code class="language-python">data_dir <span class="token operator">=</span> <span class="token string">'./train_data/'</span>tra_image_dir <span class="token operator">=</span> <span class="token string">'DUTS/DUTS-TR/DUTS-TR/im_aug/'</span>tra_label_dir <span class="token operator">=</span> <span class="token string">'DUTS/DUTS-TR/DUTS-TR/gt_aug/'</span>image_ext <span class="token operator">=</span> <span class="token string">'.jpg'</span>label_ext <span class="token operator">=</span> <span class="token string">'.png'</span>model_dir <span class="token operator">=</span> <span class="token string">"./saved_models/basnet_bsi/"</span>epoch_num <span class="token operator">=</span> <span class="token number">100000</span><span class="token comment" spellcheck="true">#训练几遍</span>batch_size_train <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment" spellcheck="true">#1次训练使用的样本量</span>batch_size_val <span class="token operator">=</span> <span class="token number">1</span>train_num <span class="token operator">=</span> <span class="token number">0</span>val_num <span class="token operator">=</span> <span class="token number">0</span>tra_img_name_list <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>data_dir <span class="token operator">+</span> tra_image_dir <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">+</span> image_ext<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回所有匹配的文件路径列表'./train_data/DUTS/DUTS-TR/DUTS-TR/im_aug/*.jpg'</span>tra_lbl_name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> img_path <span class="token keyword">in</span> tra_img_name_list<span class="token punctuation">:</span>    img_name <span class="token operator">=</span> img_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 以‘/ ’为分割符，保留最后一段*.jpg</span>    aaa <span class="token operator">=</span> img_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    bbb <span class="token operator">=</span> aaa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    imidx <span class="token operator">=</span> bbb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>bbb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        imidx <span class="token operator">=</span> imidx <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> bbb<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    tra_lbl_name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data_dir <span class="token operator">+</span> tra_label_dir <span class="token operator">+</span> imidx <span class="token operator">+</span> label_ext<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train images: "</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>tra_img_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train labels: "</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>tra_lbl_name_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span>train_num <span class="token operator">=</span> len<span class="token punctuation">(</span>tra_img_name_list<span class="token punctuation">)</span>salobj_dataset <span class="token operator">=</span> SalObjDataset<span class="token punctuation">(</span>    img_name_list<span class="token operator">=</span>tra_img_name_list<span class="token punctuation">,</span>    lbl_name_list<span class="token operator">=</span>tra_lbl_name_list<span class="token punctuation">,</span>    transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">#这个类的主要作用是串联多个图片变换的操作</span>        RescaleT<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#将图像缩放到输出256*256</span>        RandomCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#随机剪裁成224*224</span>        ToTensorLab<span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将n维数组转换成张量（数值在0-1之间，且是brg）,flag=0是只有rgb空间</span>salobj_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>salobj_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size_train<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#shuffle(是否进行shuffle操作), num_workers(加载数据的时候使用几个子进程)</span></code></pre><h3 id="2-3-定义模型"><a href="#2-3-定义模型" class="headerlink" title="2.3 定义模型"></a>2.3 定义模型</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># define the net</span>net <span class="token operator">=</span> BASNet<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-4-优化"><a href="#2-4-优化" class="headerlink" title="2.4 优化"></a>2.4 优化</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---define optimizer..."</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">08</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 待优化参数或参数组，构建好神经网络后，网络的参数都保存在parameters()函数当中</span><span class="token comment" spellcheck="true">#lr (float, 可选) – 学习率（默认：1e-3）,lr：同样也称为学习率或步长因子，它控制了权重的更新比率（如 0.001）。较大的值（如 0.3）在学习率更新前会有更快的初始学习，而较小的值（如 1.0E-5）会令训练收敛到更好的性能。</span><span class="token comment" spellcheck="true">#betas (Tuple[float, float], 可选) – 用于计算梯度以及梯度平方的运行平均值的系数（默认：0.9，0.999）beta1：一阶矩估计的指数衰减率（如 0.9）。beta2：二阶矩估计的指数衰减率（如 0.999）。该超参数在稀疏梯度（如在 NLP 或计算机视觉任务中）中应该设置为接近 1 的数。</span><span class="token comment" spellcheck="true">#eps (float, 可选) – 为了增加数值计算的稳定性而加到分母里的项（默认：1e-8）</span><span class="token comment" spellcheck="true">#weight_decay (float, 可选) – 权重衰减（L2惩罚）（默认: 0）</span></code></pre><h3 id="2-5-训练过程"><a href="#2-5-训练过程" class="headerlink" title="2.5 训练过程"></a>2.5 训练过程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---start training..."</span><span class="token punctuation">)</span>ite_num <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#从开始到训练结束的迭代次数</span>running_loss <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token comment" spellcheck="true">#每2000次迭代累计的7个维度损失相加</span>running_tar_loss <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token comment" spellcheck="true">#每2000次迭代累计的最后一层的损失相加</span>ite_num4val <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#每训练一轮的迭代次数</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> epoch_num<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#训练10w轮</span>    net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#net.eval（）在非训练的时候是需要加的，没有这句代码，一些网络层的值会发生变动，不会固定，神经网络每一次生成的结果也是不固定的，如droupout层和BN层，生成质量可能好也可能不好。</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>salobj_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#一次读8张</span>        <span class="token comment" spellcheck="true">#enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</span>        ite_num <span class="token operator">=</span> ite_num <span class="token operator">+</span> <span class="token number">1</span>        ite_num4val <span class="token operator">=</span> ite_num4val <span class="token operator">+</span> <span class="token number">1</span>        inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#张量转换成浮点型</span>        labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># wrap them in Variable</span>        <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            inputs_v<span class="token punctuation">,</span> labels_v <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                                        requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            inputs_v<span class="token punctuation">,</span> labels_v <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Variable<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># y zero the parameter gradients 优化置0</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># forward + backward + optimize</span>        d0<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">,</span> d5<span class="token punctuation">,</span> d6<span class="token punctuation">,</span> d7 <span class="token operator">=</span> net<span class="token punctuation">(</span>inputs_v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#net应该是个4维的，得到前向反馈结果</span>        loss2<span class="token punctuation">,</span> loss <span class="token operator">=</span> muti_bce_loss_fusion<span class="token punctuation">(</span>d0<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">,</span> d5<span class="token punctuation">,</span> d6<span class="token punctuation">,</span> d7<span class="token punctuation">,</span> labels_v<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 反向传播,计算当前梯度</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#根据梯度更新网络参数</span>        <span class="token comment" spellcheck="true"># # print statistics</span>        running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#每2000次迭代累计的7维度混和损失</span>        running_tar_loss <span class="token operator">+=</span> loss2<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#每2000次迭代最后一层（输出层）累计的混合损失</span>        <span class="token comment" spellcheck="true"># del temporary outputs and loss</span>        <span class="token keyword">del</span> d0<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">,</span> d5<span class="token punctuation">,</span> d6<span class="token punctuation">,</span> d7<span class="token punctuation">,</span> loss2<span class="token punctuation">,</span> loss        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[epoch: %3d/%3d, batch: %5d/%5d, ite: %d] train loss: %3f, tar: %3f "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>        epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> epoch_num<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> batch_size_train<span class="token punctuation">,</span> train_num<span class="token punctuation">,</span> ite_num<span class="token punctuation">,</span> running_loss <span class="token operator">/</span> ite_num4val<span class="token punctuation">,</span> running_tar_loss <span class="token operator">/</span> ite_num4val<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ite_num <span class="token operator">%</span> <span class="token number">2000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># save model every 2000 iterations</span>            <span class="token comment" spellcheck="true">#每2000次存一次模型</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model_dir <span class="token operator">+</span> <span class="token string">"basnet_bsi_itr_%d_train_%3f_tar_%3f.pth"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>ite_num<span class="token punctuation">,</span> running_loss <span class="token operator">/</span> ite_num4val<span class="token punctuation">,</span> running_tar_loss <span class="token operator">/</span> ite_num4val<span class="token punctuation">)</span><span class="token punctuation">)</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span>            running_tar_loss <span class="token operator">=</span> <span class="token number">0.0</span>            net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># resume train</span>            ite_num4val <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------Congratulations! Training Done!!!-------------'</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/04/28/basnet-yuan-ma-fen-xi/1.jpg"></p><p><img src="/2021/04/28/basnet-yuan-ma-fen-xi/2.jpg"></p><h2 id="3-basnet-test"><a href="#3-basnet-test" class="headerlink" title="3. basnet_test"></a>3. basnet_test</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> skimage <span class="token keyword">import</span> io<span class="token punctuation">,</span> transform<span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token comment" spellcheck="true">#, utils</span><span class="token comment" spellcheck="true"># import torch.optim as optim</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> glob<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> RescaleT<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> CenterCrop<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> ToTensor<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> ToTensorLab<span class="token keyword">from</span> data_loader <span class="token keyword">import</span> SalObjDataset<span class="token keyword">from</span> model <span class="token keyword">import</span> BASNet</code></pre><h3 id="3-1-标准化"><a href="#3-1-标准化" class="headerlink" title="3.1 标准化"></a>3.1 标准化</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normPRED</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#标准化</span>    ma <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    mi <span class="token operator">=</span> torch<span class="token punctuation">.</span>min<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    dn <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token operator">-</span>mi<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>ma<span class="token operator">-</span>mi<span class="token punctuation">)</span>    <span class="token keyword">return</span> dn</code></pre><h3 id="3-2-保存图片"><a href="#3-2-保存图片" class="headerlink" title="3.2 保存图片"></a>3.2 保存图片</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_output</span><span class="token punctuation">(</span>image_name<span class="token punctuation">,</span>pred<span class="token punctuation">,</span>d_dir<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#存图片</span>    predict <span class="token operator">=</span> pred    predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#主要对数据的维度进行压缩，去掉维数为1的的维度</span>    predict_np <span class="token operator">=</span> predict<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#.data是读取Variable中的tensor   .cpu是把数据转移到cpu上  .numpy()把tensor变成numpy</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>predict_np<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#array转成image</span>    img_name <span class="token operator">=</span> image_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    image <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image_name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用于读取图片文件。value是numpy array</span>    imo <span class="token operator">=</span> im<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>resample<span class="token operator">=</span>Image<span class="token punctuation">.</span>BILINEAR<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#双线性插值，是一种通过平均周围像素颜色来添加像素的方法，输出的图像的每个像素都是原图中四个像素（2x2)运算的结果’</span>    <span class="token comment" spellcheck="true">#由于它是从原图四个像素中运算的，因此这种算法很大程度上消除了锯齿现象，而且效果也比较好。</span>    pb_np <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>imo<span class="token punctuation">)</span>    aaa <span class="token operator">=</span> img_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    bbb <span class="token operator">=</span> aaa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    imidx <span class="token operator">=</span> bbb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>bbb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        imidx <span class="token operator">=</span> imidx <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> bbb<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    imo<span class="token punctuation">.</span>save<span class="token punctuation">(</span>d_dir<span class="token operator">+</span>imidx<span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">)</span></code></pre><h3 id="3-3-获得路径"><a href="#3-3-获得路径" class="headerlink" title="3.3 获得路径"></a>3.3 获得路径</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --------- 1. get image path and name ---------</span>image_dir <span class="token operator">=</span> <span class="token string">'./test_data/test_images/'</span>prediction_dir <span class="token operator">=</span> <span class="token string">'./test_data/test_results/'</span>model_dir <span class="token operator">=</span> <span class="token string">'./saved_models/basnet_bsi/basnet.pth'</span>img_name_list <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>image_dir <span class="token operator">+</span> <span class="token string">'*.jpg'</span><span class="token punctuation">)</span></code></pre><h3 id="3-4-数据加载"><a href="#3-4-数据加载" class="headerlink" title="3.4 数据加载"></a>3.4 数据加载</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --------- 2. dataloader ---------</span><span class="token comment" spellcheck="true">#1. dataload</span>test_salobj_dataset <span class="token operator">=</span> SalObjDataset<span class="token punctuation">(</span>img_name_list <span class="token operator">=</span> img_name_list<span class="token punctuation">,</span>                                    lbl_name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>RescaleT<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ToTensorLab<span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调成256*256，转成张量？数组</span>test_salobj_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_salobj_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>num_workers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="3-5-模型定义"><a href="#3-5-模型定义" class="headerlink" title="3.5 模型定义"></a>3.5 模型定义</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --------- 3. model define ---------</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"...load BASNet..."</span><span class="token punctuation">)</span>net <span class="token operator">=</span> BASNet<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加载模型的参数</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-6-推断每张图"><a href="#3-6-推断每张图" class="headerlink" title="3.6 推断每张图"></a>3.6 推断每张图</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --------- 4. inference for each image ---------</span><span class="token keyword">for</span> i_test<span class="token punctuation">,</span> data_test <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_salobj_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"inferencing:"</span><span class="token punctuation">,</span>img_name_list<span class="token punctuation">[</span>i_test<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    inputs_test <span class="token operator">=</span> data_test<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>    inputs_test <span class="token operator">=</span> inputs_test<span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>    <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        inputs_test <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs_test<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        inputs_test <span class="token operator">=</span> Variable<span class="token punctuation">(</span>inputs_test<span class="token punctuation">)</span>    d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d4<span class="token punctuation">,</span>d5<span class="token punctuation">,</span>d6<span class="token punctuation">,</span>d7<span class="token punctuation">,</span>d8 <span class="token operator">=</span> net<span class="token punctuation">(</span>inputs_test<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># normalization</span>    pred <span class="token operator">=</span> d1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#最后一个阶段stage</span>    pred <span class="token operator">=</span> normPRED<span class="token punctuation">(</span>pred<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># save results to test_results folder</span>    save_output<span class="token punctuation">(</span>img_name_list<span class="token punctuation">[</span>i_test<span class="token punctuation">]</span><span class="token punctuation">,</span>pred<span class="token punctuation">,</span>prediction_dir<span class="token punctuation">)</span>    <span class="token keyword">del</span> d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d4<span class="token punctuation">,</span>d5<span class="token punctuation">,</span>d6<span class="token punctuation">,</span>d7<span class="token punctuation">,</span>d8</code></pre><h2 id="4-resnet-model"><a href="#4-resnet-model" class="headerlink" title="4. resnet_model"></a>4. resnet_model</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">## code from: https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> math<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>model_zoo <span class="token keyword">as</span> model_zoo<span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token comment" spellcheck="true"># __all__ = ['ResNet', 'resnet18', 'resnet34', 'resnet50', 'resnet101',</span><span class="token comment" spellcheck="true">#            'resnet152', 'ResNet34P','ResNet50S','ResNet50P','ResNet101P']</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># resnet18_dir = '/local/sda4/yqian3/RoadNets/resnet_model/resnet18-5c106cde.pth'</span><span class="token comment" spellcheck="true"># resnet34_dir = '/local/sda4/yqian3/RoadNets/resnet_model/resnet34-333f7ec4.pth'</span><span class="token comment" spellcheck="true"># resnet50_dir = '/local/sda4/yqian3/RoadNets/resnet_model/resnet50-19c8e357.pth'</span><span class="token comment" spellcheck="true"># resnet101_dir = '/local/sda4/yqian3/RoadNets/resnet_model/resnet101-5d3b4d8f.pth'</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># model_urls = {</span><span class="token comment" spellcheck="true">#     'resnet18': 'https://download.pytorch.org/models/resnet18-5c106cde.pth',</span><span class="token comment" spellcheck="true">#     'resnet34': 'https://download.pytorch.org/models/resnet34-333f7ec4.pth',</span><span class="token comment" spellcheck="true">#     'resnet50': 'https://download.pytorch.org/models/resnet50-19c8e357.pth',</span><span class="token comment" spellcheck="true">#     'resnet101': 'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth',</span><span class="token comment" spellcheck="true">#     'resnet152': 'https://download.pytorch.org/models/resnet152-b121ed2d.pth',</span><span class="token comment" spellcheck="true"># }</span></code></pre><h3 id="4-1-生成卷积层"><a href="#4-1-生成卷积层" class="headerlink" title="4.1 生成卷积层"></a>4.1 生成卷积层</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">conv3x3</span><span class="token punctuation">(</span>in_planes<span class="token punctuation">,</span> out_planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"3x3 convolution with padding"</span>    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_planes<span class="token punctuation">,</span> out_planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                     padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#bias为偏置值，卷积之后，如果要接BN操作，最好是不设置偏置，因为不起作用，而且占显卡内存。</span></code></pre><h3 id="4-2-定义基础块"><a href="#4-2-定义基础块" class="headerlink" title="4.2  定义基础块"></a>4.2  定义基础块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BasicBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    expansion <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>BasicBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> conv3x3<span class="token punctuation">(</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#以通道为单位批量标准化</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#inplace = True ,会改变输入数据的值,节省反复申请与释放内存的空间与时间,只是将原来的地址传递,效率更好</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> conv3x3<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        residual <span class="token operator">=</span> x <span class="token comment" spellcheck="true">#x是什么</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            residual <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">+=</span> residual        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token keyword">class</span> <span class="token class-name">BasicBlockDe</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#与上一个一样，但多一层卷积</span>    expansion <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>BasicBlockDe<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convRes <span class="token operator">=</span> conv3x3<span class="token punctuation">(</span>inplanes<span class="token punctuation">,</span>planes<span class="token punctuation">,</span>stride<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bnRes <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reluRes <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> conv3x3<span class="token punctuation">(</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> conv3x3<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        residual <span class="token operator">=</span> self<span class="token punctuation">.</span>convRes<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        residual <span class="token operator">=</span> self<span class="token punctuation">.</span>bnRes<span class="token punctuation">(</span>residual<span class="token punctuation">)</span>        residual <span class="token operator">=</span> self<span class="token punctuation">.</span>reluRes<span class="token punctuation">(</span>residual<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            residual <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">+=</span> residual        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out</code></pre><h3 id="4-3-瓶颈块"><a href="#4-3-瓶颈块" class="headerlink" title="4.3 瓶颈块"></a>4.3 瓶颈块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bottleneck</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#瓶颈块</span>    expansion <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                               padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        residual <span class="token operator">=</span> x        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            residual <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">+=</span> residual        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out</code></pre><h2 id="5-BASNet"><a href="#5-BASNet" class="headerlink" title="5. BASNet"></a>5. BASNet</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> models<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> Fs<span class="token keyword">from</span> <span class="token punctuation">.</span>resnet_model <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><h3 id="5-1-优化模块"><a href="#5-1-优化模块" class="headerlink" title="5.1 优化模块"></a>5.1 优化模块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RefUnet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#优化模块</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>in_ch<span class="token punctuation">,</span>inc_ch<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RefUnet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv0 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_ch<span class="token punctuation">,</span>inc_ch<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#in_channels：输入的通道数目 【必选】</span>        <span class="token comment" spellcheck="true">#out_channels： 输出的通道数目 【必选】</span>        <span class="token comment" spellcheck="true">#kernel_size：卷积核的大小，类型为int 或者元组，当卷积是方形的时候，只需要一个整数边长即可，卷积不是方形，要输入一个元组表示 高和宽。【必选】</span>        <span class="token comment" spellcheck="true">#stride： 卷积每次滑动的步长为多少，默认是 1 【可选】</span>        <span class="token comment" spellcheck="true">#padding： 设置在所有边界增加 值为 0 的边距的大小（也就是在feature map 外围增加几圈 0 ），例如当 padding =1 的时候，如果原来大小为 3 × 3 ，那么之后的大小为 5 × 5 。即在外围加了一圈 0 。【可选】</span>        <span class="token comment" spellcheck="true">#dilation：控制卷积核之间的间距【可选】</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>inc_ch<span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#kernel_size(int or tuple) - max pooling的窗口大小，</span>        <span class="token comment" spellcheck="true">#stride(int or tuple, optional) - max pooling的窗口移动的步长。默认值是kernel_size</span>        <span class="token comment" spellcheck="true">#padding(int or tuple, optional) - 输入的每一条边补充0的层数</span>        <span class="token comment" spellcheck="true">#dilation(int or tuple, optional) – 一个控制窗口中元素步幅的参数</span>        <span class="token comment" spellcheck="true">#return_indices - 如果等于True，会返回输出最大值的序号，对于上采样操作会有帮助</span>        <span class="token comment" spellcheck="true">#ceil_mode - 如果等于True，计算输出信号大小的时候，会使用向上取整，代替默认的向下取整的操作</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#####</span>        self<span class="token punctuation">.</span>conv5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#####</span>        self<span class="token punctuation">.</span>conv_d4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn_d4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu_d4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv_d3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn_d3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu_d3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv_d2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn_d2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu_d2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv_d1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn_d1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu_d1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv_d0 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>upscore2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#scale_factor指定输出为输入的多少倍数</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        hx <span class="token operator">=</span> x        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>conv0<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>        hx1 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#224*224*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>pool1<span class="token punctuation">(</span>hx1<span class="token punctuation">)</span>        hx2 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#112*112*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>pool2<span class="token punctuation">(</span>hx2<span class="token punctuation">)</span>        hx3 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu3<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn3<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#56*56*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>pool3<span class="token punctuation">(</span>hx3<span class="token punctuation">)</span>        hx4 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu4<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn4<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv4<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#28*28*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>pool4<span class="token punctuation">(</span>hx4<span class="token punctuation">)</span>        hx5 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu5<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn5<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv5<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#14*14*64 类似于预测模块中的桥</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>hx5<span class="token punctuation">)</span>        d4 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu_d4<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_d4<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_d4<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>hx4<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#28*28*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>d4<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#torch.cat是按维数1拼接在一起，即在通道的维度拼接</span>        d3 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu_d3<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_d3<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_d3<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>hx3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#56*56*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>d3<span class="token punctuation">)</span>        d2 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu_d2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_d2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_d2<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>hx2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#112*112*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>        d1 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu_d1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_d1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_d1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>hx1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#224*224*64</span>        residual <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_d0<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> residual</code></pre><h3 id="5-2-预测模块"><a href="#5-2-预测模块" class="headerlink" title="5.2 预测模块"></a>5.2 预测模块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BASNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n_channels<span class="token punctuation">,</span>n_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>BASNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        resnet <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet34<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Encoder--------------</span>        self<span class="token punctuation">.</span>inconv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>n_channels<span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inbn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inrelu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 1</span>        self<span class="token punctuation">.</span>encoder1 <span class="token operator">=</span> resnet<span class="token punctuation">.</span>layer1 <span class="token comment" spellcheck="true">#224*224*64</span>        <span class="token comment" spellcheck="true">#stage 2</span>        self<span class="token punctuation">.</span>encoder2 <span class="token operator">=</span> resnet<span class="token punctuation">.</span>layer2 <span class="token comment" spellcheck="true">#112*112*128</span>        <span class="token comment" spellcheck="true">#stage 3</span>        self<span class="token punctuation">.</span>encoder3 <span class="token operator">=</span> resnet<span class="token punctuation">.</span>layer3 <span class="token comment" spellcheck="true">#56*56*256</span>        <span class="token comment" spellcheck="true">#stage 4</span>        self<span class="token punctuation">.</span>encoder4 <span class="token operator">=</span> resnet<span class="token punctuation">.</span>layer4 <span class="token comment" spellcheck="true">#28*28*512</span>        self<span class="token punctuation">.</span>pool4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 5</span>        self<span class="token punctuation">.</span>resb5_1 <span class="token operator">=</span> BasicBlock<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resb5_2 <span class="token operator">=</span> BasicBlock<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resb5_3 <span class="token operator">=</span> BasicBlock<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#14*14*512</span>        self<span class="token punctuation">.</span>pool5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 6</span>        self<span class="token punctuation">.</span>resb6_1 <span class="token operator">=</span> BasicBlock<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resb6_2 <span class="token operator">=</span> BasicBlock<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resb6_3 <span class="token operator">=</span> BasicBlock<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#7*7*512</span>        <span class="token comment" spellcheck="true">## -------------Bridge--------------</span>        <span class="token comment" spellcheck="true">#stage Bridge</span>        self<span class="token punctuation">.</span>convbg_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>dilation<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#7*7*512</span>        self<span class="token punctuation">.</span>bnbg_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relubg_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convbg_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>dilation<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bnbg_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relubg_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>convbg_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>dilation<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bnbg_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relubg_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Decoder--------------</span>        <span class="token comment" spellcheck="true">#stage 6d</span>        self<span class="token punctuation">.</span>conv6d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>bn6d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu6d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv6d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>dilation<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn6d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu6d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv6d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>dilation<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn6d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu6d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 5d</span>        self<span class="token punctuation">.</span>conv5d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn5d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu5d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv5d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn5d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu5d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv5d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn5d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu5d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 4d</span>        self<span class="token punctuation">.</span>conv4d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>bn4d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu4d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv4d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn4d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu4d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv4d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn4d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu4d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 3d</span>        self<span class="token punctuation">.</span>conv3d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>bn3d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu3d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu3d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu3d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 2d</span>        self<span class="token punctuation">.</span>conv2d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>bn2d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu2d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu2d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu2d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#stage 1d</span>        self<span class="token punctuation">.</span>conv1d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>bn1d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu1d_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu1d_m <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu1d_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Bilinear Upsampling--------------</span>        self<span class="token punctuation">.</span>upscore6 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>upscore5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>upscore4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>upscore3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>upscore2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Side Output--------------</span>        self<span class="token punctuation">.</span>outconvb <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>outconv6 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>outconv5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>outconv4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>outconv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>outconv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>outconv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Refine Module-------------</span>        self<span class="token punctuation">.</span>refunet <span class="token operator">=</span> RefUnet<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        hx <span class="token operator">=</span> x        <span class="token comment" spellcheck="true">## -------------Encoder-------------</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>inconv<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输入层</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>inbn<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>inrelu<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>        h1 <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder1<span class="token punctuation">(</span>hx<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#224*224*64</span>        h2 <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder2<span class="token punctuation">(</span>h1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#112*112*128</span>        h3 <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder3<span class="token punctuation">(</span>h2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#56*56*256</span>        h4 <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder4<span class="token punctuation">(</span>h3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#28*28*512</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>pool4<span class="token punctuation">(</span>h4<span class="token punctuation">)</span>         hx <span class="token operator">=</span> self<span class="token punctuation">.</span>resb5_1<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#14*14*512</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>resb5_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>        h5 <span class="token operator">=</span> self<span class="token punctuation">.</span>resb5_3<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>pool5<span class="token punctuation">(</span>h5<span class="token punctuation">)</span>         hx <span class="token operator">=</span> self<span class="token punctuation">.</span>resb6_1<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#7*7*512</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>resb6_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>        h6 <span class="token operator">=</span> self<span class="token punctuation">.</span>resb6_3<span class="token punctuation">(</span>hx<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Bridge-------------</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relubg_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bnbg_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>convbg_1<span class="token punctuation">(</span>h6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#7*7*512</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relubg_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bnbg_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>convbg_m<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hbg <span class="token operator">=</span> self<span class="token punctuation">.</span>relubg_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bnbg_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>convbg_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Decoder-------------</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu6d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn6d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv6d_1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hbg<span class="token punctuation">,</span>h6<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#7*7*512</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu6d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn6d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv6d_m<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hd6 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu6d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn6d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv6d_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>hd6<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7 -> 14</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu5d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn5d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv5d_1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>h5<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#14*14*512</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu5d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn5d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv5d_m<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hd5 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu5d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn5d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv5d_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>hd5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 14 -> 28</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu4d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn4d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv4d_1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>h4<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#28*28*512</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu4d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn4d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv4d_m<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hd4 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu4d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn4d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv4d_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>hd4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 28 -> 56</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu3d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn3d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3d_1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>h3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#56*56*256</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu3d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn3d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3d_m<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hd3 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu3d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn3d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3d_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>hd3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 56 -> 112</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu2d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn2d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2d_1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>h2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#112*112*128</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu2d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn2d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2d_m<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hd2 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu2d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn2d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2d_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>hd2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 112 -> 224</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu1d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1d_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1d_1<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span>h1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#224*224*64</span>        hx <span class="token operator">=</span> self<span class="token punctuation">.</span>relu1d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1d_m<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1d_m<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hd1 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu1d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1d_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1d_2<span class="token punctuation">(</span>hx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## -------------Side Output 7个阶段的最后一层上采样-------------</span>        db <span class="token operator">=</span> self<span class="token punctuation">.</span>outconvb<span class="token punctuation">(</span>hbg<span class="token punctuation">)</span>        db <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore6<span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7->224</span>        d6 <span class="token operator">=</span> self<span class="token punctuation">.</span>outconv6<span class="token punctuation">(</span>hd6<span class="token punctuation">)</span>        d6 <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore6<span class="token punctuation">(</span>d6<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7->224</span>        d5 <span class="token operator">=</span> self<span class="token punctuation">.</span>outconv5<span class="token punctuation">(</span>hd5<span class="token punctuation">)</span>        d5 <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore5<span class="token punctuation">(</span>d5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 14->224</span>        d4 <span class="token operator">=</span> self<span class="token punctuation">.</span>outconv4<span class="token punctuation">(</span>hd4<span class="token punctuation">)</span>        d4 <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore4<span class="token punctuation">(</span>d4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 28->224</span>        d3 <span class="token operator">=</span> self<span class="token punctuation">.</span>outconv3<span class="token punctuation">(</span>hd3<span class="token punctuation">)</span>        d3 <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore3<span class="token punctuation">(</span>d3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 56->224</span>        d2 <span class="token operator">=</span> self<span class="token punctuation">.</span>outconv2<span class="token punctuation">(</span>hd2<span class="token punctuation">)</span>        d2 <span class="token operator">=</span> self<span class="token punctuation">.</span>upscore2<span class="token punctuation">(</span>d2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 112->224</span>        d1 <span class="token operator">=</span> self<span class="token punctuation">.</span>outconv1<span class="token punctuation">(</span>hd1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 224</span>        <span class="token comment" spellcheck="true">## -------------Refine Module 最后一层经过优化-------------</span>        dout <span class="token operator">=</span> self<span class="token punctuation">.</span>refunet<span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 224</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>d4<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>d5<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>d6<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>db<span class="token punctuation">)</span></code></pre><h2 id="6-IOU"><a href="#6-IOU" class="headerlink" title="6.IOU"></a>6.IOU</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">_iou</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> target<span class="token punctuation">,</span> size_average <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> pred<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#是照片序号</span>    IoU <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#compute the IoU of the foreground</span>        Iand1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">*</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#torch.sum()对输入的tensor数据的某一维度求和</span>        <span class="token comment" spellcheck="true">#tensor([[1, 1, 1],[1, 1, 1]])</span>        <span class="token comment" spellcheck="true">#a1 =  torch.sum(a)  a2 =  torch.sum(a, dim=0)  a3 =  torch.sum(a, dim=1)</span>        <span class="token comment" spellcheck="true">#tensor([[6.]])     tensor([[2., 2., 2.]])      tensor([[3.], [3.]])</span>        Ior1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>Iand1        IoU1 <span class="token operator">=</span> Iand1<span class="token operator">/</span>Ior1        <span class="token comment" spellcheck="true">#IoU loss is (1-IoU1)</span>        IoU <span class="token operator">=</span> IoU <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>IoU1<span class="token punctuation">)</span>    <span class="token keyword">return</span> IoU<span class="token operator">/</span>b<span class="token keyword">class</span> <span class="token class-name">IOU</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size_average <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>IOU<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>size_average <span class="token operator">=</span> size_average    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _iou<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> target<span class="token punctuation">,</span> self<span class="token punctuation">.</span>size_average<span class="token punctuation">)</span></code></pre><h2 id="7-SSIM"><a href="#7-SSIM" class="headerlink" title="7.SSIM"></a>7.SSIM</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># https://github.com/Po-Hsun-Su/pytorch-ssim/blob/master/pytorch_ssim/__init__.py</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> math <span class="token keyword">import</span> exp<span class="token keyword">def</span> <span class="token function">gaussian</span><span class="token punctuation">(</span>window_size<span class="token punctuation">,</span> sigma<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#生成一维高斯核</span>    gauss <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>x <span class="token operator">-</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span>float<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>sigma<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>window_size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> gauss<span class="token operator">/</span>gauss<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#归一化</span><span class="token keyword">def</span> <span class="token function">create_window</span><span class="token punctuation">(</span>window_size<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#通过一维高斯核生成二维</span>    _1D_window <span class="token operator">=</span> gaussian<span class="token punctuation">(</span>window_size<span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#升维</span>    _2D_window <span class="token operator">=</span> _1D_window<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>_1D_window<span class="token punctuation">.</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    window <span class="token operator">=</span> Variable<span class="token punctuation">(</span>_2D_window<span class="token punctuation">.</span>expand<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> window_size<span class="token punctuation">,</span> window_size<span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#expand参数中 第一个参数是输出通道 即卷积核数量，输出通道数=channel说明经过卷积后通道数不变</span>    <span class="token comment" spellcheck="true"># 第二个参数是inchannel(输入通道,与输入图像相同的通道数)/groups,由于groups=channel,所以在这里等于1</span>    <span class="token keyword">return</span> window<span class="token keyword">def</span> <span class="token function">_ssim</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> window_size<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> size_average <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mu1 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#卷积求均值</span>    mu2 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span>    mu1_sq <span class="token operator">=</span> mu1<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    mu2_sq <span class="token operator">=</span> mu2<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    mu1_mu2 <span class="token operator">=</span> mu1<span class="token operator">*</span>mu2    <span class="token comment" spellcheck="true"># 在计算方差和协方差时用到了公式Var(X)=E[X^2]-E[X]^2, cov(X,Y)=E[XY]-E[X]E[Y].</span>    sigma1_sq <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img1<span class="token operator">*</span>img1<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span> <span class="token operator">-</span> mu1_sq <span class="token comment" spellcheck="true">#求方差</span>    sigma2_sq <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img2<span class="token operator">*</span>img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span> <span class="token operator">-</span> mu2_sq    sigma12 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img1<span class="token operator">*</span>img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span> <span class="token operator">-</span> mu1_mu2  <span class="token comment" spellcheck="true">#求协方差</span>    C1 <span class="token operator">=</span> <span class="token number">0.01</span><span class="token operator">**</span><span class="token number">2</span>    C2 <span class="token operator">=</span> <span class="token number">0.03</span><span class="token operator">**</span><span class="token number">2</span>    ssim_map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>mu1_mu2 <span class="token operator">+</span> C1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>sigma12 <span class="token operator">+</span> C2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mu1_sq <span class="token operator">+</span> mu2_sq <span class="token operator">+</span> C1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>sigma1_sq <span class="token operator">+</span> sigma2_sq <span class="token operator">+</span> C2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> size_average<span class="token punctuation">:</span>        <span class="token keyword">return</span> ssim_map<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ssim_map<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SSIM</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> window_size <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> size_average <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SSIM<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window_size <span class="token operator">=</span> window_size         self<span class="token punctuation">.</span>size_average <span class="token operator">=</span> size_average        self<span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">1</span>         self<span class="token punctuation">.</span>window <span class="token operator">=</span> create_window<span class="token punctuation">(</span>window_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>channel<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用初始化的channel创建window</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img1<span class="token punctuation">,</span> img2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>_<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> img1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取img1的通道数</span>        <span class="token keyword">if</span> channel <span class="token operator">==</span> self<span class="token punctuation">.</span>channel <span class="token operator">and</span> self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> img1<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#判断初始化通道与img1通道数 判断window的数据类型与img1数据类型</span>            window <span class="token operator">=</span> self<span class="token punctuation">.</span>window        <span class="token keyword">else</span><span class="token punctuation">:</span>            window <span class="token operator">=</span> create_window<span class="token punctuation">(</span>self<span class="token punctuation">.</span>window_size<span class="token punctuation">,</span> channel<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#若不相等，创建img1 channel的window</span>             <span class="token keyword">if</span> img1<span class="token punctuation">.</span>is_cuda<span class="token punctuation">:</span>                window <span class="token operator">=</span> window<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>img1<span class="token punctuation">.</span>get_device<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            window <span class="token operator">=</span> window<span class="token punctuation">.</span>type_as<span class="token punctuation">(</span>img1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将window的数据类型转换为与img1相同</span>            self<span class="token punctuation">.</span>window <span class="token operator">=</span> window <span class="token comment" spellcheck="true">#使用通过img channel创建的window</span>            self<span class="token punctuation">.</span>channel <span class="token operator">=</span> channel <span class="token comment" spellcheck="true">#使用img1 channel</span>        <span class="token keyword">return</span> _ssim<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> self<span class="token punctuation">.</span>window_size<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> self<span class="token punctuation">.</span>size_average<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_logssim</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> window_size<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> size_average <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mu1 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span>    mu2 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span>    mu1_sq <span class="token operator">=</span> mu1<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    mu2_sq <span class="token operator">=</span> mu2<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    mu1_mu2 <span class="token operator">=</span> mu1<span class="token operator">*</span>mu2    sigma1_sq <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img1<span class="token operator">*</span>img1<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span> <span class="token operator">-</span> mu1_sq    sigma2_sq <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img2<span class="token operator">*</span>img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span> <span class="token operator">-</span> mu2_sq    sigma12 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>img1<span class="token operator">*</span>img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> padding <span class="token operator">=</span> window_size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> channel<span class="token punctuation">)</span> <span class="token operator">-</span> mu1_mu2    C1 <span class="token operator">=</span> <span class="token number">0.01</span><span class="token operator">**</span><span class="token number">2</span>    C2 <span class="token operator">=</span> <span class="token number">0.03</span><span class="token operator">**</span><span class="token number">2</span>    ssim_map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>mu1_mu2 <span class="token operator">+</span> C1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>sigma12 <span class="token operator">+</span> C2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mu1_sq <span class="token operator">+</span> mu2_sq <span class="token operator">+</span> C1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>sigma1_sq <span class="token operator">+</span> sigma2_sq <span class="token operator">+</span> C2<span class="token punctuation">)</span><span class="token punctuation">)</span>    ssim_map <span class="token operator">=</span> <span class="token punctuation">(</span>ssim_map <span class="token operator">-</span> torch<span class="token punctuation">.</span>min<span class="token punctuation">(</span>ssim_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>ssim_map<span class="token punctuation">)</span><span class="token operator">-</span>torch<span class="token punctuation">.</span>min<span class="token punctuation">(</span>ssim_map<span class="token punctuation">)</span><span class="token punctuation">)</span>    ssim_map <span class="token operator">=</span> <span class="token operator">-</span>torch<span class="token punctuation">.</span>log<span class="token punctuation">(</span>ssim_map <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> size_average<span class="token punctuation">:</span>        <span class="token keyword">return</span> ssim_map<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ssim_map<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LOGSSIM</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> window_size <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> size_average <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>LOGSSIM<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window_size <span class="token operator">=</span> window_size        self<span class="token punctuation">.</span>size_average <span class="token operator">=</span> size_average        self<span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>window <span class="token operator">=</span> create_window<span class="token punctuation">(</span>window_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>channel<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img1<span class="token punctuation">,</span> img2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>_<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> img1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> channel <span class="token operator">==</span> self<span class="token punctuation">.</span>channel <span class="token operator">and</span> self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> img1<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            window <span class="token operator">=</span> self<span class="token punctuation">.</span>window        <span class="token keyword">else</span><span class="token punctuation">:</span>            window <span class="token operator">=</span> create_window<span class="token punctuation">(</span>self<span class="token punctuation">.</span>window_size<span class="token punctuation">,</span> channel<span class="token punctuation">)</span>            <span class="token keyword">if</span> img1<span class="token punctuation">.</span>is_cuda<span class="token punctuation">:</span>                window <span class="token operator">=</span> window<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>img1<span class="token punctuation">.</span>get_device<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            window <span class="token operator">=</span> window<span class="token punctuation">.</span>type_as<span class="token punctuation">(</span>img1<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>window <span class="token operator">=</span> window            self<span class="token punctuation">.</span>channel <span class="token operator">=</span> channel        <span class="token keyword">return</span> _logssim<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> self<span class="token punctuation">.</span>window_size<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> self<span class="token punctuation">.</span>size_average<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ssim</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> window_size <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> size_average <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>_<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> img1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>    window <span class="token operator">=</span> create_window<span class="token punctuation">(</span>window_size<span class="token punctuation">,</span> channel<span class="token punctuation">)</span>    <span class="token keyword">if</span> img1<span class="token punctuation">.</span>is_cuda<span class="token punctuation">:</span>        window <span class="token operator">=</span> window<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>img1<span class="token punctuation">.</span>get_device<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    window <span class="token operator">=</span> window<span class="token punctuation">.</span>type_as<span class="token punctuation">(</span>img1<span class="token punctuation">)</span>    <span class="token keyword">return</span> _ssim<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> window<span class="token punctuation">,</span> window_size<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> size_average<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>create_window<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8.测试"></a>8.测试</h2><pre class=" language-python"><code class="language-python">    img_path <span class="token operator">=</span> path_data1 <span class="token operator">+</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path_data1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    im1 <span class="token operator">=</span> PIL<span class="token punctuation">.</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path_data2 <span class="token operator">+</span> <span class="token string">"1.jpg"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#原图</span>    im1 <span class="token operator">=</span> im1<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>    ret<span class="token punctuation">,</span> tmp <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>    im2 <span class="token operator">=</span> PIL<span class="token punctuation">.</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#二值化后的黑白图</span>    im2 <span class="token operator">=</span> im2<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"RGBA"</span><span class="token punctuation">)</span>    height<span class="token punctuation">,</span> width <span class="token operator">=</span> im1<span class="token punctuation">.</span>size    <span class="token keyword">for</span> h <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>            b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r <span class="token operator">=</span> im2<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> im2<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span>                <span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> im2<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                im1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BASNet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/25/hello-world/"/>
      <url>2021/04/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
